[
 [
  "Expr([Term([],[],1)],'(1)')"
 ],
 [
  "Expr([Term([],[Qv('u','x1','s1','c1'), Qb('u','x2','s2','c2')],1)],\"Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2')\")"
 ],
 [
  "Expr([Term([],[Qv('u','x1','s1','c1'), Qb('u','x2','s2','c2')],1), Term([],[Qb('u','x2','s2','c2'), Qv('u','x1','s1','c1')],1)],\"+Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') + Qb('u','x2','s2','c2') * Qv('u','x1','s1','c1')\")"
 ],
 [
  "Expr([Term([],[],1)],'< (1) >')"
 ],
 [
  "Expr([Term([S('l','x1','x2','s1','s2','c1','c2')],[],1)],\"< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') >\")"
 ],
 [
  "Expr([],\"< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') + Qb('u','x2','s2','c2') * Qv('u','x1','s1','c1') >\")"
 ],
 [
  "# Begin CExpr\ndiagram_type_dict = dict()\ndiagram_type_dict[()] = 'ADT0'\ndiagram_type_dict[((('x1', 'x2'), 1),)] = 'ADT1'\n# Positions:\nx1, x2 = ['x1', 'x2']\n# Diagram type coef:\ncoef_ADT0                      = 1\ncoef_ADT1                      = 1\n# Named terms:\nterm_ADT0_0                    = coef_ADT0 * \nterm_ADT1_0                    = coef_ADT1 * S_l(x1,x2)\nterms = [ 0 for i in range(2) ]\nterms[0] = term_ADT0_0\nterms[1] = term_ADT1_0\n# Named exprs:\nexprs = [ 0 for i in range(3) ]\n# < (1) >  exprs[0]\nexprs[0] += 1*term_ADT0_0\n# < Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') >  exprs[1]\nexprs[1] += 1*term_ADT1_0\n# < Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') + Qb('u','x2','s2','c2') * Qv('u','x1','s1','c1') >  exprs[2]\n# End CExpr"
 ],
 [
  "[('ADT0', ()), ('ADT1', ((('x1', 'x2'), 1),))]"
 ],
 [
  "['x1', 'x2']"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[('term_ADT0_0', Term([],[],1)), ('term_ADT1_0', Term([S('l','x1','x2','s1','s2','c1','c2')],[],1))]"
 ],
 [
  "[('< (1) >  exprs[0]', [(1, 'term_ADT0_0')]), (\"< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') >  exprs[1]\", [(1, 'term_ADT1_0')]), (\"< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') + Qb('u','x2','s2','c2') * Qv('u','x1','s1','c1') >  exprs[2]\", [])]"
 ],
 [
  "# Begin CExpr\ndiagram_type_dict = dict()\ndiagram_type_dict[()] = 'ADT0'\ndiagram_type_dict[((('x1', 'x2'), 1),)] = 'ADT1'\n# Positions:\nx1, x2 = ['x1', 'x2']\n# Variables prop:\nV_S_0                          = S_l(x1,x2)\n# Variables factor:\nV_factor_coef_0                = 1\n# Diagram type coef:\ncoef_ADT0                      = 1\ncoef_ADT1                      = 1\n# Named terms:\nterm_ADT0_0                    = coef_ADT0 * \nterm_ADT1_0                    = coef_ADT1 * V_S_0\nterms = [ 0 for i in range(2) ]\nterms[0] = term_ADT0_0\nterms[1] = term_ADT1_0\n# Named exprs:\nexprs = [ 0 for i in range(3) ]\n# < (1) >  exprs[0]\nexprs[0] += (V_factor_coef_0)*term_ADT0_0\n# < Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') >  exprs[1]\nexprs[1] += (V_factor_coef_0)*term_ADT1_0\n# < Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') + Qb('u','x2','s2','c2') * Qv('u','x1','s1','c1') >  exprs[2]\n# End CExpr"
 ],
 [
  "[('ADT0', ()), ('ADT1', ((('x1', 'x2'), 1),))]"
 ],
 [
  "['x1', 'x2']"
 ],
 [
  "[]"
 ],
 [
  "[('V_factor_coef_0', ea.Expr([ea.Term([],1)]))]"
 ],
 [
  "[('V_S_0', S('l','x1','x2','s1','s2','c1','c2'))]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[('term_ADT0_0', Term([],[],1)), ('term_ADT1_0', Term([Var('V_S_0')],[],1))]"
 ],
 [
  "[('< (1) >  exprs[0]', [(ea.Expr([ea.Term([ea.Factor(V_factor_coef_0,[],Var)],1)]), 'term_ADT0_0')]), (\"< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') >  exprs[1]\", [(ea.Expr([ea.Term([ea.Factor(V_factor_coef_0,[],Var)],1)]), 'term_ADT1_0')]), (\"< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') + Qb('u','x2','s2','c2') * Qv('u','x1','s1','c1') >  exprs[2]\", [])]"
 ],
 [
  "from auto_contractor.runtime import *\n\n### ----\n\n@timer\ndef cexpr_function(*, positions_dict, get_prop, is_ama_and_sloppy=False):\n    # get_props\n    props, cms, factors = cexpr_function_get_prop(positions_dict, get_prop)\n    # eval\n    ama_val = cexpr_function_eval(positions_dict, props, cms, factors)\n    # extract sloppy val\n    val_sloppy = ama_extract(ama_val, is_sloppy = True)\n    # extract AMA val\n    val_ama = ama_extract(ama_val)\n    # return\n    if is_ama_and_sloppy:\n        # return both AMA corrected results and sloppy results\n        return val_ama, val_sloppy\n    else:\n        # return AMA corrected results by default\n        return val_ama\n\n### ----\n\n@timer_flops\ndef cexpr_function_get_prop(positions_dict, get_prop):\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    # get prop\n    V_S_0 = get_prop('l', x1, x2)\n    # get color matrix\n    # set props for return\n    props = [\n        V_S_0,\n        ]\n    # set color matrix for return\n    cms = [\n        ]\n    # set intermediate factors\n    # declare factors\n    factors = np.zeros(1, dtype=np.complex128)\n    factors_view = factors # Python only\n    # set factors\n    # V_factor_coef_0\n    V_factor_coef_0 = (1) # Python only\n    factors_view[0] = V_factor_coef_0\n    # set flops\n    total_flops = len(props) * 144 * 2 * 8 + len(cms) * 9 * 2 * 8 + len(factors) * 2 * 8\n    # return\n    return total_flops, (props, cms, factors,)\n\n### ----\n\n@timer_flops\ndef cexpr_function_eval(positions_dict, props, cms, factors):\n    # load AMA props with proper format\n    props = [ load_prop(p) for p in props ]\n    # join the AMA props\n    ama_props = ama_list(*props)\n    # apply eval to the factors and AMA props\n    ama_val = ama_apply1(lambda x_props: cexpr_function_eval_with_props(positions_dict, x_props, cms, factors), ama_props)\n    # set flops\n    total_flops = ama_counts(ama_val) * total_sloppy_flops\n    # return\n    return total_flops, ama_val\n\n### ----\n\n@timer_flops\ndef cexpr_function_eval_with_props(positions_dict, props, cms, factors_view): # Python only\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    # set props\n    p_V_S_0 = props[0] # Python only\n    # set cms\n    # set factors\n    V_factor_coef_0 = factors_view[0] # Python only\n    # compute products\n    # compute traces\n    # set terms\n    term_ADT0_0 = 1 # Python only\n    term_ADT1_0 = p_V_S_0 # Python only\n    # declare exprs\n    exprs = np.empty(3, dtype=object)\n    exprs_view = exprs\n    # set exprs\n    expr_V_G = SpinMatrix() # Python only\n    expr_V_S = WilsonMatrix() # Python only\n    expr_V_U = ColorMatrix() # Python only\n    # 0 name='< (1) >  exprs[0]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_coef_0))) * term_ADT0_0\n    exprs_view[0] = expr_V_a # Python only\n    # 1 name='< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') >  exprs[1]' \n    expr_V_S.set_zero() # Python only\n    expr_V_S += mat_mul_a_wm(((V_factor_coef_0)), term_ADT1_0)\n    exprs_view[1] = expr_V_S.copy() # Python only\n    # 2 name='< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') + Qb('u','x2','s2','c2') * Qv('u','x1','s1','c1') >  exprs[2]' \n    exprs_view[2] = 0\n    # set flops\n    total_flops = total_sloppy_flops\n    # return\n    return total_flops, exprs\n\n### ----\n\n# Total flops per sloppy call is: 0\ntotal_sloppy_flops = 0"
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check get_data_sig is_cython=False",
  {
   "real": 15.325849886336291,
   "imag": -15.659291332109987,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check_ama get_data_sig is_cython=False",
  {
   "real": 11.492942956036883,
   "imag": -13.926566927529471,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "from auto_contractor.runtime import *\nimport cython # Cython\ncimport qlat_utils.everything as cc # Cython\ncimport qlat_utils.all as qu # Cython\ncimport libcpp.complex # Cython\ncimport numpy # Cython\n\n### ----\n\n@timer\ndef cexpr_function(*, positions_dict, get_prop, is_ama_and_sloppy=False):\n    # get_props\n    props, cms, factors = cexpr_function_get_prop(positions_dict, get_prop)\n    # eval\n    ama_val = cexpr_function_eval(positions_dict, props, cms, factors)\n    # extract sloppy val\n    val_sloppy = ama_extract(ama_val, is_sloppy = True)\n    # extract AMA val\n    val_ama = ama_extract(ama_val)\n    # return\n    if is_ama_and_sloppy:\n        # return both AMA corrected results and sloppy results\n        return val_ama, val_sloppy\n    else:\n        # return AMA corrected results by default\n        return val_ama\n\n### ----\n\n@timer_flops\n@cython.boundscheck(False) # Cython\n@cython.wraparound(False) # Cython\ndef cexpr_function_get_prop(positions_dict, get_prop):\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    # get prop\n    V_S_0 = get_prop('l', x1, x2)\n    # get color matrix\n    # set props for return\n    props = [\n        V_S_0,\n        ]\n    # set color matrix for return\n    cms = [\n        ]\n    # set intermediate factors\n    # declare factors\n    cdef numpy.ndarray[numpy.complex128_t] factors # Cython\n    factors = np.zeros(1, dtype=np.complex128)\n    cdef cc.PyComplexD[:] factors_view = factors # Cython\n    # set factors\n    # V_factor_coef_0\n    cdef cc.PyComplexD V_factor_coef_0 = (1) # Cython\n    factors_view[0] = V_factor_coef_0\n    # set flops\n    total_flops = len(props) * 144 * 2 * 8 + len(cms) * 9 * 2 * 8 + len(factors) * 2 * 8\n    # return\n    return total_flops, (props, cms, factors,)\n\n### ----\n\n@timer_flops\ndef cexpr_function_eval(positions_dict, props, cms, factors):\n    # load AMA props with proper format\n    props = [ load_prop(p) for p in props ]\n    # join the AMA props\n    ama_props = ama_list(*props)\n    # apply eval to the factors and AMA props\n    ama_val = ama_apply1(lambda x_props: cexpr_function_eval_with_props(positions_dict, x_props, cms, factors), ama_props)\n    # set flops\n    total_flops = ama_counts(ama_val) * total_sloppy_flops\n    # return\n    return total_flops, ama_val\n\n### ----\n\n@timer_flops\n@cython.boundscheck(False) # Cython\n@cython.wraparound(False) # Cython\ndef cexpr_function_eval_with_props(dict positions_dict, list props, list cms, cc.PyComplexD[:] factors_view): # Cython\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    # set props\n    cdef cc.WilsonMatrix* p_V_S_0 = &(<qu.WilsonMatrix>props[0]).xx # Cython\n    # set cms\n    # set factors\n    cdef cc.PyComplexD V_factor_coef_0 = factors_view[0] # Cython\n    # compute products\n    # compute traces\n    # set terms\n    cdef cc.PyComplexD term_ADT0_0 = 1 # Cython\n    cdef cc.WilsonMatrix term_ADT1_0 = p_V_S_0[0] # Cython\n    # declare exprs\n    exprs = np.empty(3, dtype=object)\n    exprs_view = exprs\n    # set exprs\n    cdef cc.PyComplexD expr_V_a # Cython\n    cdef cc.SpinMatrix expr_V_G # Cython\n    cdef cc.WilsonMatrix expr_V_S # Cython\n    cdef cc.ColorMatrix expr_V_U # Cython\n    cdef qu.SpinMatrix expr_V_G_box # Cython\n    cdef qu.WilsonMatrix expr_V_S_box # Cython\n    cdef qu.ColorMatrix expr_V_U_box # Cython\n    # 0 name='< (1) >  exprs[0]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_coef_0))) * term_ADT0_0\n    exprs_view[0] = expr_V_a # Cython\n    # 1 name='< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') >  exprs[1]' \n    cc.set_zero(expr_V_S) # Cython\n    expr_V_S += cc.ccpy_d(((V_factor_coef_0))) * term_ADT1_0\n    expr_V_S_box = WilsonMatrix() # Cython\n    expr_V_S_box.xx = expr_V_S # Cython\n    exprs_view[1] = expr_V_S_box # Cython\n    # 2 name='< Qv('u','x1','s1','c1') * Qb('u','x2','s2','c2') + Qb('u','x2','s2','c2') * Qv('u','x1','s1','c1') >  exprs[2]' \n    exprs_view[2] = 0\n    # set flops\n    total_flops = total_sloppy_flops\n    # return\n    return total_flops, exprs\n\n### ----\n\n# Total flops per sloppy call is: 0\ntotal_sloppy_flops = 0"
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check get_data_sig is_cython=True",
  {
   "real": 15.325849886336291,
   "imag": -15.659291332109987,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check_ama get_data_sig is_cython=True",
  {
   "real": 11.492942956036883,
   "imag": -13.926566927529471,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "get_prop wm: {wm[:].tolist()!r}"
 ],
 [
  "eval_cexpr res[0]: (1+0j)"
 ],
 [
  "eval_cexpr res[1]: WilsonMatrix([[(0.5915643782578145+0.27694247813086437j), (0.9430929532658553+0.013910774470858336j), (0.6126212305922768+0.6201033738948813j), (0.7104959563019206+0.555992043183151j), (0.36615011193058+0.9328771517466036j), (0.1274514860351636+0.7326109610345889j), (0.23754966068250327+0.3272795939536652j), (0.875160428144565+0.1676315862521914j), (0.7648777652562333+0.49024871119537405j), (0.033504071704668945+0.6663579064479539j), (0.06562804471256191+0.03651561169718006j), (0.41628277766522137+0.6044293278263341j)], [(0.45328735048309804+0.5486439317334377j), (0.6330706638948591+0.8881390819683106j), (0.9499166541787158+0.5607662805434445j), (0.609220105735159+0.9329852204741292j), (0.6866687540543316+0.2466733666170258j), (0.7719969801688753+0.5806294928544372j), (0.4951248246015888+0.41436083688038716j), (0.08604707606622924+0.2367419516522614j), (0.2784063795051692+0.9578466004161759j), (0.12991065420089515+0.11888095754488953j), (0.20480657127502144+0.5877283754342499j), (0.4517167284554317+0.6152791155364319j)], [(0.8141707423044403+0.9327271450630082j), (0.5742705538746422+0.1352819179942635j), (0.6811549558070507+0.8665851155943095j), (0.5401032459201686+0.6834097970318432j), (0.5152924994430667+0.9732860928664976j), (0.5089620497799735+0.9513748007184075j), (0.5927890214792131+0.35516862502602364j), (0.5170311638925327+0.4405805406190283j), (0.517447829424938+0.7280771157028644j), (0.9385278028970646+0.11308180316195982j), (0.8977799079973123+0.6762557548673896j), (0.1855622388190343+0.4285349530643689j)], [(0.9166052392912797+0.7738832290026298j), (0.969044193876605+0.5920839497395641j), (0.43460759562443046+0.33468999478747696j), (0.26693904241387933+0.5462132164085497j), (0.5702621493048129+0.914029891726275j), (0.43256426291040745+0.4862520434477304j), (0.33379823063634695+0.5572453960428312j), (0.08768697206762677+0.052331786986222324j), (0.8568184373532354+0.5592487702088438j), (0.03995495356862941+0.3833802158194097j), (0.37541189080044124+0.2151804711168225j), (0.8884143306952802+0.017389959749054055j)], [(0.8378956215075747+0.7357672280214234j), (0.10922834072073816+0.03261922162533745j), (0.616533033152541+0.5809879511466369j), (0.12572761434142168+0.3602381593810496j), (0.5153880848156416+0.6682776877008073j), (0.7816429000899923+0.2980962038629792j), (0.5248120207758648+0.45605428583701174j), (0.22343458450156475+0.23512384785949345j), (0.6638826117322307+0.1155966023862224j), (0.07160953993572665+0.8801990341475837j), (0.7186700990429844+0.7753563836691609j), (0.7359399616932614+0.23946494810098334j)], [(0.6394647377210456+0.8928644649531439j), (0.577635180392545+0.8741688432791109j), (0.7701410254770845+0.7349534775682351j), (0.05956722215313486+0.08570379784137247j), (0.5975486977306205+0.33927091601810105j), (0.6577817315164389+0.21881801435351445j), (0.10410602209415006+0.7078334193937724j), (0.13363669083947954+0.6212022406353893j), (0.43114566558230955+0.8791684472205749j), (0.1701207739214314+0.20043933594892976j), (0.8378945488092763+0.313711186128477j), (0.5898190121929894+0.9408462960019633j)], [(0.90198725165172+0.8646415281172826j), (0.2514030623299733+0.8941562736360005j), (0.9573723855183713+0.8449879263891156j), (0.42136888763933905+0.747398070434905j), (0.8247827385885486+0.09736662597552347j), (0.5716792202704338+0.9611806290096669j), (0.2469568911780171+0.9384148470497143j), (0.020474920096638684+0.13782928924560797j), (0.28172126610992215+0.30078336730520494j), (0.47041240043528676+0.8048055448730103j), (0.17387123189826786+0.1892041020272368j), (0.03980135478192929+0.567670439522251j)], [(0.055629746118007216+0.9639256988851994j), (0.6763074448818639+0.8799137290530319j), (0.5888584956164942+0.40323971979224j), (0.1203182681921935+0.8519909583092767j), (0.6778694223248678+0.7894630475730007j), (0.43579674193903006+0.10966868097340382j), (0.3746625589416053+0.3233365241616932j), (0.3349533628232826+0.38994341048399866j), (0.06709180821223101+0.3270727267074952j), (0.16898828887898582+0.3632425960416783j), (0.2668860030156907+0.7568797629580486j), (0.44247701011736307+0.051373630147158844j)], [(0.5742748172632166+0.8249152344899159j), (0.4369465514843413+0.1657787979402367j), (0.13310203957958278+0.9812540851941054j), (0.8978919054839436+0.3492958441037512j), (0.5663067511298683+0.058464820233642474j), (0.5837111566341919+0.7012594278353774j), (0.9506100490521168+0.44042304884569655j), (0.9478407758104965+0.8598221117521807j), (0.38861993475330187+0.06311536009835593j), (0.227842641074414+0.5435888552121353j), (0.17656926167811457+0.9587247750306764j), (0.720728396898053+0.5400969917121742j)], [(0.7630121562226161+0.9837271718244865j), (0.050356488465930445+0.8670212942963482j), (0.5630154339911932+0.4480718856538821j), (0.8234845735183082+0.03177614492395276j), (0.0044779143911058885+0.7634739194521648j), (0.6801022242300607+0.5027587247657634j), (0.4712175007496483+0.022371495826159115j), (0.0901250691270446+0.948887517014858j), (0.14569995548147607+0.6686128452753576j), (0.582224744864219+0.1843114857418299j), (0.5749850357761647+0.7701118092718594j), (0.7766216032481014+0.47177128219381625j)], [(0.7057475607831375+0.9416616770538095j), (0.00989573301597182+0.769504546511735j), (0.34935286182317127+0.2251888448212397j), (0.18789667591424622+0.45538775276695076j), (0.7053745397068862+0.05676066296210406j), (0.020368319657810503+0.7743666018727643j), (0.8577838896125812+0.644587154628332j), (0.07887630390737871+0.40115572556420304j), (0.21173798340974737+0.705563293221124j), (0.050938250189568365+0.026942601032419185j), (0.6991454175189418+0.15840168466771765j), (0.3923891343741854+0.7104562612419816j)], [(0.9972924162970214+0.46244758983123674j), (0.36974168709936994+0.4050619865974523j), (0.30688015418276227+0.6528053806024079j), (0.43662528093882974+0.01424785210004228j), (0.06489085339831079+0.09790508923887525j), (0.1058819467553987+0.5031274841463994j), (0.8495930049954543+0.7134688080944636j), (0.020813370603340535+0.7084087161698984j), (0.9205915260479379+0.0843018340749123j), (0.3897837191009365+0.2779965872650384j), (0.5291838898903287+0.2056828331991933j), (0.7370151772588046+0.27956518358480437j)]])"
 ],
 [
  "eval_cexpr res[2]: 0"
 ]
]