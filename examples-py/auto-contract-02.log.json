[
 [
  "Expr([Term([],[],1)],'(1)')"
 ],
 [
  "Expr([Term([],[Qv('u','x1','s1','c1'), Qb('s','x2','s2','c2'), Qb('u','x3','a_s_1','a_c_1'), Qv('s','x3','a_s_1','a_c_1')],1)],\"Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar s)(x3)\")"
 ],
 [
  "Expr([Term([G(5,'a_s_2','a_s_3')],[Qv('u','x1','s1','c1'), Qb('s','x2','s2','c2'), Qb('u','x3','a_s_2','a_c_2'), Qv('s','x3','a_s_3','a_c_2')],1)],\"Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g5 s)(x3)\")"
 ],
 [
  "Expr([Term([G(3,'a_s_4','a_s_5')],[Qv('u','x1','s1','c1'), Qb('s','x2','s2','c2'), Qb('u','x3','a_s_4','a_c_3'), Qv('s','x3','a_s_5','a_c_3')],1)],\"Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 s)(x3)\")"
 ],
 [
  "Expr([Term([G(3,'a_s_6','a_s_7'), G(5,'a_s_7','a_s_8')],[Qv('u','x1','s1','c1'), Qb('s','x2','s2','c2'), Qb('u','x3','a_s_6','a_c_4'), Qv('s','x3','a_s_8','a_c_4')],1)],\"Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 g5 s)(x3)\")"
 ],
 [
  "Expr([Term([],[],1)],'< (1) >')"
 ],
 [
  "Expr([Term([Chain([S('l','x1','x3','s1','auto','c1','auto'), S('s','x3','x2','auto','s2','auto','c2')],'sc')],[],1)],\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar s)(x3) >\")"
 ],
 [
  "Expr([Term([Chain([S('l','x1','x3','s1','auto','c1','auto'), G(5), S('s','x3','x2','auto','s2','auto','c2')],'sc')],[],1)],\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g5 s)(x3) >\")"
 ],
 [
  "Expr([Term([Chain([S('l','x1','x3','s1','auto','c1','auto'), G(3), S('s','x3','x2','auto','s2','auto','c2')],'sc')],[],1)],\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 s)(x3) >\")"
 ],
 [
  "Expr([Term([Chain([S('l','x1','x3','s1','auto','c1','auto'), G(3), G(5), S('s','x3','x2','auto','s2','auto','c2')],'sc')],[],1)],\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 g5 s)(x3) >\")"
 ],
 [
  "# Begin CExpr\ndiagram_type_dict = dict()\ndiagram_type_dict[()] = 'ADT0'\ndiagram_type_dict[((('x1', 'x3'), 1), (('x3', 'x2'), 1))] = 'ADT1'\n# Positions:\nx1, x2, x3 = ['x1', 'x2', 'x3']\n# Diagram type coef:\ncoef_ADT0                      = 1\ncoef_ADT1                      = 1\n# Named terms:\nterm_ADT0_0                    = coef_ADT0 * \nterm_ADT1_0                    = coef_ADT1 * chain(S_l(x1,x3,s1,auto,c1,auto)*S_s(x3,x2,auto,s2,auto,c2))\nterm_ADT1_1                    = coef_ADT1 * chain(S_l(x1,x3,s1,auto,c1,auto)*gamma_5*S_s(x3,x2,auto,s2,auto,c2))\nterm_ADT1_2                    = coef_ADT1 * chain(S_l(x1,x3,s1,auto,c1,auto)*gamma_t*S_s(x3,x2,auto,s2,auto,c2))\nterm_ADT1_3                    = coef_ADT1 * chain(S_l(x1,x3,s1,auto,c1,auto)*gamma_t*gamma_5*S_s(x3,x2,auto,s2,auto,c2))\nterms = [ 0 for i in range(5) ]\nterms[0] = term_ADT0_0\nterms[1] = term_ADT1_0\nterms[2] = term_ADT1_1\nterms[3] = term_ADT1_2\nterms[4] = term_ADT1_3\n# Named exprs:\nexprs = [ 0 for i in range(5) ]\n# < (1) >  exprs[0]\nexprs[0] += 1*term_ADT0_0\n# < Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar s)(x3) >  exprs[1]\nexprs[1] += 1*term_ADT1_0\n# < Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g5 s)(x3) >  exprs[2]\nexprs[2] += 1*term_ADT1_1\n# < Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 s)(x3) >  exprs[3]\nexprs[3] += 1*term_ADT1_2\n# < Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 g5 s)(x3) >  exprs[4]\nexprs[4] += 1*term_ADT1_3\n# End CExpr"
 ],
 [
  "[('ADT0', ()), ('ADT1', ((('x1', 'x3'), 1), (('x3', 'x2'), 1)))]"
 ],
 [
  "['x1', 'x2', 'x3']"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[('term_ADT0_0', Term([],[],1)), ('term_ADT1_0', Term([Chain([S('l','x1','x3','s1','auto','c1','auto'), S('s','x3','x2','auto','s2','auto','c2')],'sc')],[],1)), ('term_ADT1_1', Term([Chain([S('l','x1','x3','s1','auto','c1','auto'), G(5), S('s','x3','x2','auto','s2','auto','c2')],'sc')],[],1)), ('term_ADT1_2', Term([Chain([S('l','x1','x3','s1','auto','c1','auto'), G(3), S('s','x3','x2','auto','s2','auto','c2')],'sc')],[],1)), ('term_ADT1_3', Term([Chain([S('l','x1','x3','s1','auto','c1','auto'), G(3), G(5), S('s','x3','x2','auto','s2','auto','c2')],'sc')],[],1))]"
 ],
 [
  "[('< (1) >  exprs[0]', [(1, 'term_ADT0_0')]), (\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar s)(x3) >  exprs[1]\", [(1, 'term_ADT1_0')]), (\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g5 s)(x3) >  exprs[2]\", [(1, 'term_ADT1_1')]), (\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 s)(x3) >  exprs[3]\", [(1, 'term_ADT1_2')]), (\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 g5 s)(x3) >  exprs[4]\", [(1, 'term_ADT1_3')])]"
 ],
 [
  "# Begin CExpr\ndiagram_type_dict = dict()\ndiagram_type_dict[()] = 'ADT0'\ndiagram_type_dict[((('x1', 'x3'), 1), (('x3', 'x2'), 1))] = 'ADT1'\n# Positions:\nx1, x2, x3 = ['x1', 'x2', 'x3']\n# Variables prop:\nV_S_0                          = S_l(x1,x3,s1,auto,c1,auto)\nV_S_1                          = S_s(x3,x2,auto,s2,auto,c2)\n# Variables factor:\nV_factor_coef_0                = 1\n# Variables chain:\nV_chain_0                      = chain(V_S_0*V_S_1)\nV_chain_1                      = chain(V_S_0*gamma_5*V_S_1)\nV_chain_2                      = chain(V_S_0*gamma_t*V_S_1)\nV_chain_3                      = chain(V_S_0*gamma_t*gamma_5*V_S_1)\n# Diagram type coef:\ncoef_ADT0                      = 1\ncoef_ADT1                      = 1\n# Named terms:\nterm_ADT0_0                    = coef_ADT0 * \nterm_ADT1_0                    = coef_ADT1 * V_chain_0\nterm_ADT1_1                    = coef_ADT1 * V_chain_1\nterm_ADT1_2                    = coef_ADT1 * V_chain_2\nterm_ADT1_3                    = coef_ADT1 * V_chain_3\nterms = [ 0 for i in range(5) ]\nterms[0] = term_ADT0_0\nterms[1] = term_ADT1_0\nterms[2] = term_ADT1_1\nterms[3] = term_ADT1_2\nterms[4] = term_ADT1_3\n# Named exprs:\nexprs = [ 0 for i in range(5) ]\n# < (1) >  exprs[0]\nexprs[0] += (V_factor_coef_0)*term_ADT0_0\n# < Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar s)(x3) >  exprs[1]\nexprs[1] += (V_factor_coef_0)*term_ADT1_0\n# < Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g5 s)(x3) >  exprs[2]\nexprs[2] += (V_factor_coef_0)*term_ADT1_1\n# < Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 s)(x3) >  exprs[3]\nexprs[3] += (V_factor_coef_0)*term_ADT1_2\n# < Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 g5 s)(x3) >  exprs[4]\nexprs[4] += (V_factor_coef_0)*term_ADT1_3\n# End CExpr"
 ],
 [
  "[('ADT0', ()), ('ADT1', ((('x1', 'x3'), 1), (('x3', 'x2'), 1)))]"
 ],
 [
  "['x1', 'x2', 'x3']"
 ],
 [
  "[]"
 ],
 [
  "[('V_factor_coef_0', ea.Expr([ea.Term([],1)]))]"
 ],
 [
  "[('V_S_0', S('l','x1','x3','s1','auto','c1','auto')), ('V_S_1', S('s','x3','x2','auto','s2','auto','c2'))]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[('V_chain_0', Chain([Var('V_S_0'), Var('V_S_1')],'sc')), ('V_chain_1', Chain([Var('V_S_0'), G(5), Var('V_S_1')],'sc')), ('V_chain_2', Chain([Var('V_S_0'), G(3), Var('V_S_1')],'sc')), ('V_chain_3', Chain([Var('V_S_0'), G(3), G(5), Var('V_S_1')],'sc'))]"
 ],
 [
  "[]"
 ],
 [
  "[('term_ADT0_0', Term([],[],1)), ('term_ADT1_0', Term([Var('V_chain_0')],[],1)), ('term_ADT1_1', Term([Var('V_chain_1')],[],1)), ('term_ADT1_2', Term([Var('V_chain_2')],[],1)), ('term_ADT1_3', Term([Var('V_chain_3')],[],1))]"
 ],
 [
  "[('< (1) >  exprs[0]', [(ea.Expr([ea.Term([ea.Factor(V_factor_coef_0,[],Var)],1)]), 'term_ADT0_0')]), (\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar s)(x3) >  exprs[1]\", [(ea.Expr([ea.Term([ea.Factor(V_factor_coef_0,[],Var)],1)]), 'term_ADT1_0')]), (\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g5 s)(x3) >  exprs[2]\", [(ea.Expr([ea.Term([ea.Factor(V_factor_coef_0,[],Var)],1)]), 'term_ADT1_1')]), (\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 s)(x3) >  exprs[3]\", [(ea.Expr([ea.Term([ea.Factor(V_factor_coef_0,[],Var)],1)]), 'term_ADT1_2')]), (\"< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 g5 s)(x3) >  exprs[4]\", [(ea.Expr([ea.Term([ea.Factor(V_factor_coef_0,[],Var)],1)]), 'term_ADT1_3')])]"
 ],
 [
  "from auto_contractor.runtime import *\n\n### ----\n\n@timer\ndef cexpr_function(*, positions_dict, get_prop, is_ama_and_sloppy=False):\n    # get_props\n    props, cms, factors = cexpr_function_get_prop(positions_dict, get_prop)\n    # eval\n    ama_val = cexpr_function_eval(positions_dict, props, cms, factors)\n    # extract sloppy val\n    val_sloppy = ama_extract(ama_val, is_sloppy = True)\n    # extract AMA val\n    val_ama = ama_extract(ama_val)\n    # return\n    if is_ama_and_sloppy:\n        # return both AMA corrected results and sloppy results\n        return val_ama, val_sloppy\n    else:\n        # return AMA corrected results by default\n        return val_ama\n\n### ----\n\n@timer_flops\ndef cexpr_function_get_prop(positions_dict, get_prop):\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    x3 = positions_dict['x3']\n    # get prop\n    V_S_0 = get_prop('l', x1, x3)\n    V_S_1 = get_prop('s', x3, x2)\n    # get color matrix\n    # set props for return\n    props = [\n        V_S_0,\n        V_S_1,\n        ]\n    # set color matrix for return\n    cms = [\n        ]\n    # set intermediate factors\n    # declare factors\n    factors = np.zeros(1, dtype=np.complex128)\n    factors_view = factors # Python only\n    # set factors\n    # V_factor_coef_0\n    V_factor_coef_0 = (1) # Python only\n    factors_view[0] = V_factor_coef_0\n    # set flops\n    total_flops = len(props) * 144 * 2 * 8 + len(cms) * 9 * 2 * 8 + len(factors) * 2 * 8\n    # return\n    return total_flops, (props, cms, factors,)\n\n### ----\n\n@timer_flops\ndef cexpr_function_eval(positions_dict, props, cms, factors):\n    # load AMA props with proper format\n    props = [ load_prop(p) for p in props ]\n    # join the AMA props\n    ama_props = ama_list(*props)\n    # apply eval to the factors and AMA props\n    ama_val = ama_apply1(lambda x_props: cexpr_function_eval_with_props(positions_dict, x_props, cms, factors), ama_props)\n    # set flops\n    total_flops = ama_counts(ama_val) * total_sloppy_flops\n    # return\n    return total_flops, ama_val\n\n### ----\n\n@timer_flops\ndef cexpr_function_eval_with_props(positions_dict, props, cms, factors_view): # Python only\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    x3 = positions_dict['x3']\n    # set props\n    p_V_S_0 = props[0] # Python only\n    p_V_S_1 = props[1] # Python only\n    # set cms\n    # set factors\n    V_factor_coef_0 = factors_view[0] # Python only\n    # compute products\n    # compute chains\n    V_chain_0 = mat_mul_wm_wm(p_V_S_0, p_V_S_1) # Python only\n    V_chain_1 = mat_mul_wm_wm(mat_mul_wm_sm(p_V_S_0, get_gamma_matrix(5)), p_V_S_1) # Python only\n    V_chain_2 = mat_mul_wm_wm(mat_mul_wm_sm(p_V_S_0, get_gamma_matrix(3)), p_V_S_1) # Python only\n    V_chain_3 = mat_mul_wm_wm(mat_mul_wm_sm(mat_mul_wm_sm(p_V_S_0, get_gamma_matrix(3)), get_gamma_matrix(5)), p_V_S_1) # Python only\n    # compute traces\n    # set terms\n    term_ADT0_0 = 1 # Python only\n    term_ADT1_0 = V_chain_0 # Python only\n    term_ADT1_1 = V_chain_1 # Python only\n    term_ADT1_2 = V_chain_2 # Python only\n    term_ADT1_3 = V_chain_3 # Python only\n    # declare exprs\n    exprs = np.empty(5, dtype=object)\n    exprs_view = exprs\n    # set exprs\n    expr_V_G = SpinMatrix() # Python only\n    expr_V_S = WilsonMatrix() # Python only\n    expr_V_U = ColorMatrix() # Python only\n    # 0 name='< (1) >  exprs[0]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_coef_0))) * term_ADT0_0\n    exprs_view[0] = expr_V_a # Python only\n    # 1 name='< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar s)(x3) >  exprs[1]' \n    expr_V_S.set_zero() # Python only\n    expr_V_S += mat_mul_a_wm(((V_factor_coef_0)), term_ADT1_0)\n    exprs_view[1] = expr_V_S.copy() # Python only\n    # 2 name='< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g5 s)(x3) >  exprs[2]' \n    expr_V_S.set_zero() # Python only\n    expr_V_S += mat_mul_a_wm(((V_factor_coef_0)), term_ADT1_1)\n    exprs_view[2] = expr_V_S.copy() # Python only\n    # 3 name='< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 s)(x3) >  exprs[3]' \n    expr_V_S.set_zero() # Python only\n    expr_V_S += mat_mul_a_wm(((V_factor_coef_0)), term_ADT1_2)\n    exprs_view[3] = expr_V_S.copy() # Python only\n    # 4 name='< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 g5 s)(x3) >  exprs[4]' \n    expr_V_S.set_zero() # Python only\n    expr_V_S += mat_mul_a_wm(((V_factor_coef_0)), term_ADT1_3)\n    exprs_view[4] = expr_V_S.copy() # Python only\n    # set flops\n    total_flops = total_sloppy_flops\n    # return\n    return total_flops, exprs\n\n### ----\n\n# Total flops per sloppy call is: 71424\ntotal_sloppy_flops = 71424"
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check get_data_sig is_cython=False",
  {
   "real": -183.1607357285402,
   "imag": 56.96970666883128,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check_ama get_data_sig is_cython=False",
  {
   "real": -178.16859244788978,
   "imag": -57.22022914585705,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "from auto_contractor.runtime import *\nimport cython # Cython\ncimport qlat_utils.everything as cc # Cython\ncimport qlat_utils.all as qu # Cython\ncimport libcpp.complex # Cython\ncimport numpy # Cython\n\n### ----\n\n@timer\ndef cexpr_function(*, positions_dict, get_prop, is_ama_and_sloppy=False):\n    # get_props\n    props, cms, factors = cexpr_function_get_prop(positions_dict, get_prop)\n    # eval\n    ama_val = cexpr_function_eval(positions_dict, props, cms, factors)\n    # extract sloppy val\n    val_sloppy = ama_extract(ama_val, is_sloppy = True)\n    # extract AMA val\n    val_ama = ama_extract(ama_val)\n    # return\n    if is_ama_and_sloppy:\n        # return both AMA corrected results and sloppy results\n        return val_ama, val_sloppy\n    else:\n        # return AMA corrected results by default\n        return val_ama\n\n### ----\n\n@timer_flops\n@cython.boundscheck(False) # Cython\n@cython.wraparound(False) # Cython\ndef cexpr_function_get_prop(positions_dict, get_prop):\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    x3 = positions_dict['x3']\n    # get prop\n    V_S_0 = get_prop('l', x1, x3)\n    V_S_1 = get_prop('s', x3, x2)\n    # get color matrix\n    # set props for return\n    props = [\n        V_S_0,\n        V_S_1,\n        ]\n    # set color matrix for return\n    cms = [\n        ]\n    # set intermediate factors\n    # declare factors\n    cdef numpy.ndarray[numpy.complex128_t] factors # Cython\n    factors = np.zeros(1, dtype=np.complex128)\n    cdef cc.PyComplexD[:] factors_view = factors # Cython\n    # set factors\n    # V_factor_coef_0\n    cdef cc.PyComplexD V_factor_coef_0 = (1) # Cython\n    factors_view[0] = V_factor_coef_0\n    # set flops\n    total_flops = len(props) * 144 * 2 * 8 + len(cms) * 9 * 2 * 8 + len(factors) * 2 * 8\n    # return\n    return total_flops, (props, cms, factors,)\n\n### ----\n\n@timer_flops\ndef cexpr_function_eval(positions_dict, props, cms, factors):\n    # load AMA props with proper format\n    props = [ load_prop(p) for p in props ]\n    # join the AMA props\n    ama_props = ama_list(*props)\n    # apply eval to the factors and AMA props\n    ama_val = ama_apply1(lambda x_props: cexpr_function_eval_with_props(positions_dict, x_props, cms, factors), ama_props)\n    # set flops\n    total_flops = ama_counts(ama_val) * total_sloppy_flops\n    # return\n    return total_flops, ama_val\n\n### ----\n\n@timer_flops\n@cython.boundscheck(False) # Cython\n@cython.wraparound(False) # Cython\ndef cexpr_function_eval_with_props(dict positions_dict, list props, list cms, cc.PyComplexD[:] factors_view): # Cython\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    x3 = positions_dict['x3']\n    # set props\n    cdef cc.WilsonMatrix* p_V_S_0 = &(<qu.WilsonMatrix>props[0]).xx # Cython\n    cdef cc.WilsonMatrix* p_V_S_1 = &(<qu.WilsonMatrix>props[1]).xx # Cython\n    # set cms\n    # set factors\n    cdef cc.PyComplexD V_factor_coef_0 = factors_view[0] # Cython\n    # compute products\n    # compute chains\n    cdef cc.WilsonMatrix V_chain_0 = p_V_S_0[0] * p_V_S_1[0] # Cython\n    cdef cc.WilsonMatrix V_chain_1 = p_V_S_0[0] * qu.gamma_matrix_5 * p_V_S_1[0] # Cython\n    cdef cc.WilsonMatrix V_chain_2 = p_V_S_0[0] * qu.gamma_matrix_3 * p_V_S_1[0] # Cython\n    cdef cc.WilsonMatrix V_chain_3 = p_V_S_0[0] * qu.gamma_matrix_3 * qu.gamma_matrix_5 * p_V_S_1[0] # Cython\n    # compute traces\n    # set terms\n    cdef cc.PyComplexD term_ADT0_0 = 1 # Cython\n    cdef cc.WilsonMatrix term_ADT1_0 = V_chain_0 # Cython\n    cdef cc.WilsonMatrix term_ADT1_1 = V_chain_1 # Cython\n    cdef cc.WilsonMatrix term_ADT1_2 = V_chain_2 # Cython\n    cdef cc.WilsonMatrix term_ADT1_3 = V_chain_3 # Cython\n    # declare exprs\n    exprs = np.empty(5, dtype=object)\n    exprs_view = exprs\n    # set exprs\n    cdef cc.PyComplexD expr_V_a # Cython\n    cdef cc.SpinMatrix expr_V_G # Cython\n    cdef cc.WilsonMatrix expr_V_S # Cython\n    cdef cc.ColorMatrix expr_V_U # Cython\n    cdef qu.SpinMatrix expr_V_G_box # Cython\n    cdef qu.WilsonMatrix expr_V_S_box # Cython\n    cdef qu.ColorMatrix expr_V_U_box # Cython\n    # 0 name='< (1) >  exprs[0]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_coef_0))) * term_ADT0_0\n    exprs_view[0] = expr_V_a # Cython\n    # 1 name='< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar s)(x3) >  exprs[1]' \n    cc.set_zero(expr_V_S) # Cython\n    expr_V_S += cc.ccpy_d(((V_factor_coef_0))) * term_ADT1_0\n    expr_V_S_box = WilsonMatrix() # Cython\n    expr_V_S_box.xx = expr_V_S # Cython\n    exprs_view[1] = expr_V_S_box # Cython\n    # 2 name='< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g5 s)(x3) >  exprs[2]' \n    cc.set_zero(expr_V_S) # Cython\n    expr_V_S += cc.ccpy_d(((V_factor_coef_0))) * term_ADT1_1\n    expr_V_S_box = WilsonMatrix() # Cython\n    expr_V_S_box.xx = expr_V_S # Cython\n    exprs_view[2] = expr_V_S_box # Cython\n    # 3 name='< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 s)(x3) >  exprs[3]' \n    cc.set_zero(expr_V_S) # Cython\n    expr_V_S += cc.ccpy_d(((V_factor_coef_0))) * term_ADT1_2\n    expr_V_S_box = WilsonMatrix() # Cython\n    expr_V_S_box.xx = expr_V_S # Cython\n    exprs_view[3] = expr_V_S_box # Cython\n    # 4 name='< Qv('u','x1','s1','c1') * Qb('s','x2','s2','c2') * (ubar g3 g5 s)(x3) >  exprs[4]' \n    cc.set_zero(expr_V_S) # Cython\n    expr_V_S += cc.ccpy_d(((V_factor_coef_0))) * term_ADT1_3\n    expr_V_S_box = WilsonMatrix() # Cython\n    expr_V_S_box.xx = expr_V_S # Cython\n    exprs_view[4] = expr_V_S_box # Cython\n    # set flops\n    total_flops = total_sloppy_flops\n    # return\n    return total_flops, exprs\n\n### ----\n\n# Total flops per sloppy call is: 71424\ntotal_sloppy_flops = 71424"
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check get_data_sig is_cython=True",
  {
   "real": -183.1607357285402,
   "imag": 56.96970666883128,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check_ama get_data_sig is_cython=True",
  {
   "real": -178.16859244788978,
   "imag": -57.22022914585705,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "get_prop wm: (-5.359149161093655-29.46637782923552j)"
 ],
 [
  "eval_cexpr res[0]: (1+0j)"
 ],
 [
  "eval_cexpr res[1]: (-5.359149161093655-29.46637782923552j)"
 ],
 [
  "eval_cexpr res[2]: (-8.880966074110884-0.4633682349342694j)"
 ],
 [
  "eval_cexpr res[3]: (-11.469993568888151-26.767435087895233j)"
 ],
 [
  "eval_cexpr res[4]: (-4.2381611152566885-11.987312091277337j)"
 ]
]