[
 [
  "Expr([Term([],[],1)],'(1)')"
 ],
 [
  "Expr([Term([G(5,'a_s_1','a_s_2'), G(5,'a_s_3','a_s_4')],[Qb('d','x2','a_s_1','a_c_1'), Qv('u','x2','a_s_2','a_c_1'), Qb('u','x1','a_s_3','a_c_2'), Qv('d','x1','a_s_4','a_c_2')],-1)],'pi+(x2)^dag * pi+(x1)')"
 ],
 [
  "Expr([Term([G(5,'a_s_5','a_s_6'), G(5,'a_s_7','a_s_8')],[Qb('d','x2','a_s_5','a_c_3'), Qv('u','x2','a_s_6','a_c_3'), Qb('u','x1','a_s_7','a_c_4'), Qv('d','x1','a_s_8','a_c_4'), Qb('u','x3','a_s_9','a_c_5'), Qv('u','x3','a_s_9','a_c_5')],-1)],'pi+(x2)^dag * pi+(x1) * (ubar u)(x3)')"
 ],
 [
  "Expr([Term([G(5,'a_s_10','a_s_11'), G(5,'a_s_12','a_s_13')],[Qb('d','x2','a_s_10','a_c_6'), Qv('u','x2','a_s_11','a_c_6'), Qb('u','x1','a_s_12','a_c_7'), Qv('d','x1','a_s_13','a_c_7'), Qb('d','x3','a_s_14','a_c_8'), Qv('d','x3','a_s_14','a_c_8')],-1)],'pi+(x2)^dag * pi+(x1) * (dbar d)(x3)')"
 ],
 [
  "Expr([Term([G(5,'a_s_15','a_s_16'), G(5,'a_s_17','a_s_18')],[Qb('d','x2','a_s_15','a_c_9'), Qv('u','x2','a_s_16','a_c_9'), Qb('u','x1','a_s_17','a_c_10'), Qv('d','x1','a_s_18','a_c_10'), Qb('s','x3','a_s_19','a_c_11'), Qv('s','x3','a_s_19','a_c_11')],-1)],'pi+(x2)^dag * pi+(x1) * (sbar s)(x3)')"
 ],
 [
  "(Expr([Term([G(5,'a_s_20','a_s_21'), G(5,'a_s_22','a_s_23'), G(3,'a_s_24','a_s_25')],[Qb('d','x2','a_s_20','a_c_12'), Qv('u','x2','a_s_21','a_c_12'), Qb('u','x1','a_s_22','a_c_13'), Qv('d','x1','a_s_23','a_c_13'), Qb('u','x3','a_s_24','a_c_14'), Qv('u','x3','a_s_25','a_c_14')],-1)],'pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3)'), None, 'Type4', ['Type2', 'Type3'])"
 ],
 [
  "(Expr([Term([G(5,'a_s_26','a_s_27'), G(5,'a_s_28','a_s_29'), G(3,'a_s_30','a_s_31')],[Qb('d','x2','a_s_26','a_c_15'), Qv('u','x2','a_s_27','a_c_15'), Qb('u','x1','a_s_28','a_c_16'), Qv('d','x1','a_s_29','a_c_16'), Qb('d','x3','a_s_30','a_c_17'), Qv('d','x3','a_s_31','a_c_17')],-1)],'pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3)'), None, 'Type4', ['Type2', 'Type3'])"
 ],
 [
  "(Expr([Term([G(5,'a_s_32','a_s_33'), G(5,'a_s_34','a_s_35'), G(3,'a_s_36','a_s_37')],[Qb('d','x2','a_s_32','a_c_18'), Qv('u','x2','a_s_33','a_c_18'), Qb('u','x1','a_s_34','a_c_19'), Qv('d','x1','a_s_35','a_c_19'), Qb('s','x3','a_s_36','a_c_20'), Qv('s','x3','a_s_37','a_c_20')],-1)],'pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3)'), None, 'Type4', ['Type2', 'Type3'])"
 ],
 [
  "Expr([Term([],[],1)],'< (1) >')"
 ],
 [
  "Expr([Term([Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc')],[],1)],'< pi+(x2)^dag * pi+(x1) >')"
 ],
 [
  "Expr([Term([Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc'), Tr([S('l','x3','x3')],'sc')],[],-1), Term([Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x3'), S('l','x3','x1')],'sc')],[],1)],'< pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >')"
 ],
 [
  "Expr([Term([Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc'), Tr([S('l','x3','x3')],'sc')],[],-1), Term([Tr([G(5), S('l','x1','x3'), S('l','x3','x2'), G(5), S('l','x2','x1')],'sc')],[],1)],'< pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >')"
 ],
 [
  "Expr([Term([Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc'), Tr([S('s','x3','x3')],'sc')],[],-1)],'< pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >')"
 ],
 [
  "Expr([Term([Tr([G(3), S('l','x3','x1'), G(5), S('l','x1','x2'), G(5), S('l','x2','x3')],'sc')],[],1), Term([Tr([G(3), S('l','x3','x3')],'sc'), Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc')],[],-1)],'< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >')"
 ],
 [
  "Expr([Term([Tr([G(3), S('l','x3','x2'), G(5), S('l','x2','x1'), G(5), S('l','x1','x3')],'sc')],[],1), Term([Tr([G(3), S('l','x3','x3')],'sc'), Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc')],[],-1)],'< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >')"
 ],
 [
  "Expr([Term([Tr([G(3), S('s','x3','x3')],'sc'), Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc')],[],-1)],'< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >')"
 ],
 [
  "# Begin CExpr\ndiagram_type_dict = dict()\ndiagram_type_dict[()] = 'Type0'\ndiagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1))] = 'Type1'\ndiagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x3'), 1), (('x3', 'x1'), 1))] = 'Type2'\ndiagram_type_dict[((('x1', 'x3'), 1), (('x2', 'x1'), 1), (('x3', 'x2'), 1))] = 'Type3'\ndiagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1), (('x3', 'x3'), 1))] = 'Type4'\n# Positions:\nx1, x2, x3 = ['x1', 'x2', 'x3']\n# Diagram type coef:\ncoef_Type0                     = 1\ncoef_Type1                     = 1\ncoef_Type2                     = 1\ncoef_Type3                     = 1\ncoef_Type4                     = 1\n# Named terms:\nterm_Type0_0                   = coef_Type0 * \nterm_Type1_0                   = coef_Type1 * tr(gamma_5*S_l(x1,x2)*gamma_5*S_l(x2,x1))\nterm_Type2_0                   = coef_Type2 * tr(gamma_5*S_l(x1,x2)*gamma_5*S_l(x2,x3)*S_l(x3,x1))\nterm_Type2_1                   = coef_Type2 * tr(gamma_t*S_l(x3,x1)*gamma_5*S_l(x1,x2)*gamma_5*S_l(x2,x3))\nterm_Type3_0                   = coef_Type3 * tr(gamma_5*S_l(x1,x3)*S_l(x3,x2)*gamma_5*S_l(x2,x1))\nterm_Type3_1                   = coef_Type3 * tr(gamma_t*S_l(x3,x2)*gamma_5*S_l(x2,x1)*gamma_5*S_l(x1,x3))\nterm_Type4_0                   = coef_Type4 * tr(gamma_5*S_l(x1,x2)*gamma_5*S_l(x2,x1))*tr(S_l(x3,x3))\nterm_Type4_1                   = coef_Type4 * tr(gamma_5*S_l(x1,x2)*gamma_5*S_l(x2,x1))*tr(S_s(x3,x3))\nterm_Type4_2                   = coef_Type4 * tr(gamma_t*S_l(x3,x3))*tr(gamma_5*S_l(x1,x2)*gamma_5*S_l(x2,x1))\nterm_Type4_3                   = coef_Type4 * tr(gamma_t*S_s(x3,x3))*tr(gamma_5*S_l(x1,x2)*gamma_5*S_l(x2,x1))\nterms = [ 0 for i in range(10) ]\nterms[0] = term_Type0_0\nterms[1] = term_Type1_0\nterms[2] = term_Type2_0\nterms[3] = term_Type2_1\nterms[4] = term_Type3_0\nterms[5] = term_Type3_1\nterms[6] = term_Type4_0\nterms[7] = term_Type4_1\nterms[8] = term_Type4_2\nterms[9] = term_Type4_3\n# Named exprs:\nexprs = [ 0 for i in range(14) ]\n# < (1) >  exprs[0]\nexprs[0] += 1*term_Type0_0\n# < pi+(x2)^dag * pi+(x1) >  exprs[1]\nexprs[1] += 1*term_Type1_0\n# < pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]\nexprs[2] += -1*term_Type4_0\nexprs[2] += 1*term_Type2_0\n# < pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]\nexprs[3] += -1*term_Type4_0\nexprs[3] += 1*term_Type3_0\n# < pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]\nexprs[4] += -1*term_Type4_1\n# < pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]\nexprs[5] += 1*term_Type2_1\nexprs[5] += -1*term_Type4_2\n# < pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]\nexprs[6] += -1*term_Type4_2\n# < pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]\nexprs[7] += 1*term_Type2_1\n# < pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]\nexprs[8] += 1*term_Type3_1\nexprs[8] += -1*term_Type4_2\n# < pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]\nexprs[9] += -1*term_Type4_2\n# < pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]\nexprs[10] += 1*term_Type3_1\n# < pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]\nexprs[11] += -1*term_Type4_3\n# < pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]\nexprs[12] += -1*term_Type4_3\n# < pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]\n# End CExpr"
 ],
 [
  "[('Type0', ()), ('Type1', ((('x1', 'x2'), 1), (('x2', 'x1'), 1))), ('Type2', ((('x1', 'x2'), 1), (('x2', 'x3'), 1), (('x3', 'x1'), 1))), ('Type3', ((('x1', 'x3'), 1), (('x2', 'x1'), 1), (('x3', 'x2'), 1))), ('Type4', ((('x1', 'x2'), 1), (('x2', 'x1'), 1), (('x3', 'x3'), 1)))]"
 ],
 [
  "['x1', 'x2', 'x3']"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[]"
 ],
 [
  "[('term_Type0_0', Term([],[],1)), ('term_Type1_0', Term([Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc')],[],1)), ('term_Type2_0', Term([Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x3'), S('l','x3','x1')],'sc')],[],1)), ('term_Type2_1', Term([Tr([G(3), S('l','x3','x1'), G(5), S('l','x1','x2'), G(5), S('l','x2','x3')],'sc')],[],1)), ('term_Type3_0', Term([Tr([G(5), S('l','x1','x3'), S('l','x3','x2'), G(5), S('l','x2','x1')],'sc')],[],1)), ('term_Type3_1', Term([Tr([G(3), S('l','x3','x2'), G(5), S('l','x2','x1'), G(5), S('l','x1','x3')],'sc')],[],1)), ('term_Type4_0', Term([Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc'), Tr([S('l','x3','x3')],'sc')],[],1)), ('term_Type4_1', Term([Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc'), Tr([S('s','x3','x3')],'sc')],[],1)), ('term_Type4_2', Term([Tr([G(3), S('l','x3','x3')],'sc'), Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc')],[],1)), ('term_Type4_3', Term([Tr([G(3), S('s','x3','x3')],'sc'), Tr([G(5), S('l','x1','x2'), G(5), S('l','x2','x1')],'sc')],[],1))]"
 ],
 [
  "[('< (1) >  exprs[0]', [(1, 'term_Type0_0')]), ('< pi+(x2)^dag * pi+(x1) >  exprs[1]', [(1, 'term_Type1_0')]), ('< pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]', [(-1, 'term_Type4_0'), (1, 'term_Type2_0')]), ('< pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]', [(-1, 'term_Type4_0'), (1, 'term_Type3_0')]), ('< pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]', [(-1, 'term_Type4_1')]), ('< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]', [(1, 'term_Type2_1'), (-1, 'term_Type4_2')]), ('< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]', [(-1, 'term_Type4_2')]), ('< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]', [(1, 'term_Type2_1')]), ('< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]', [(1, 'term_Type3_1'), (-1, 'term_Type4_2')]), ('< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]', [(-1, 'term_Type4_2')]), ('< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]', [(1, 'term_Type3_1')]), ('< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]', [(-1, 'term_Type4_3')]), ('< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]', [(-1, 'term_Type4_3')]), ('< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]', [])]"
 ],
 [
  "diagram_type_dict = qac.get_diagram_type_dict(cexpr)"
 ],
 [
  "diagram_type_dict[()] = 'Type0'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1))] = 'Type1'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x3'), 1), (('x3', 'x1'), 1))] = 'Type2'"
 ],
 [
  "diagram_type_dict[((('x1', 'x3'), 1), (('x2', 'x1'), 1), (('x3', 'x2'), 1))] = 'Type3'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1), (('x3', 'x3'), 1))] = 'Type4'"
 ],
 [
  "qac.get_expr_names(cexpr)"
 ],
 [
  "< (1) >  exprs[0]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) >  exprs[1]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]"
 ],
 [
  "# Begin CExpr\ndiagram_type_dict = dict()\ndiagram_type_dict[()] = 'Type0'\ndiagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1))] = 'Type1'\ndiagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x3'), 1), (('x3', 'x1'), 1))] = 'Type2'\ndiagram_type_dict[((('x1', 'x3'), 1), (('x2', 'x1'), 1), (('x3', 'x2'), 1))] = 'Type3'\ndiagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1), (('x3', 'x3'), 1))] = 'Type4'\n# Positions:\nx1, x2, x3 = ['x1', 'x2', 'x3']\n# Variables prop:\nV_S_0                          = S_l(x1,x2)\nV_S_1                          = S_l(x2,x1)\nV_S_2                          = S_l(x2,x3)\nV_S_3                          = S_l(x3,x1)\nV_S_4                          = S_l(x1,x3)\nV_S_5                          = S_l(x3,x2)\nV_S_6                          = S_l(x3,x3)\nV_S_7                          = S_s(x3,x3)\n# Variables factor:\nV_factor_final_0               = 1\nV_factor_final_1               = (-1+0j)\n# Variables prod:\nV_prod_GS_0                    = gamma_5*V_S_0\nV_prod_SG_0                    = V_prod_GS_0*gamma_5\nV_prod_GS_1                    = gamma_5*V_S_1\nV_prod_SG_1                    = V_prod_GS_1*gamma_5\nV_prod_SS_0                    = V_prod_SG_0*V_S_2\nV_prod_SS_1                    = V_prod_SG_1*V_S_4\nV_prod_SS_2                    = V_S_3*V_prod_SS_0\nV_prod_SS_3                    = V_S_5*V_prod_SS_1\n# Variables tr:\nV_tr_0                         = tr(V_prod_SG_0*V_S_1)\nV_tr_1                         = tr(V_prod_SS_2)\nV_tr_2                         = tr(gamma_t*V_prod_SS_2)\nV_tr_3                         = tr(V_prod_SS_3)\nV_tr_4                         = tr(gamma_t*V_prod_SS_3)\nV_tr_5                         = tr(V_S_6)\nV_tr_6                         = tr(V_S_7)\nV_tr_7                         = tr(gamma_t*V_S_6)\nV_tr_8                         = tr(gamma_t*V_S_7)\n# Diagram type coef:\ncoef_Type0                     = 1\ncoef_Type1                     = 1\ncoef_Type2                     = 1\ncoef_Type3                     = 1\ncoef_Type4                     = 1\n# Named terms:\nterm_Type0_0                   = coef_Type0 * \nterm_Type1_0                   = coef_Type1 * V_tr_0\nterm_Type2_0                   = coef_Type2 * V_tr_1\nterm_Type2_1                   = coef_Type2 * V_tr_2\nterm_Type3_0                   = coef_Type3 * V_tr_3\nterm_Type3_1                   = coef_Type3 * V_tr_4\nterm_Type4_0                   = coef_Type4 * V_tr_0*V_tr_5\nterm_Type4_1                   = coef_Type4 * V_tr_0*V_tr_6\nterm_Type4_2                   = coef_Type4 * V_tr_0*V_tr_7\nterm_Type4_3                   = coef_Type4 * V_tr_0*V_tr_8\nterms = [ 0 for i in range(10) ]\nterms[0] = term_Type0_0\nterms[1] = term_Type1_0\nterms[2] = term_Type2_0\nterms[3] = term_Type2_1\nterms[4] = term_Type3_0\nterms[5] = term_Type3_1\nterms[6] = term_Type4_0\nterms[7] = term_Type4_1\nterms[8] = term_Type4_2\nterms[9] = term_Type4_3\n# Named exprs:\nexprs = [ 0 for i in range(14) ]\n# < (1) >  exprs[0]\nexprs[0] += (V_factor_final_0)*term_Type0_0\n# < pi+(x2)^dag * pi+(x1) >  exprs[1]\nexprs[1] += (V_factor_final_0)*term_Type1_0\n# < pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]\nexprs[2] += (V_factor_final_1)*term_Type4_0\nexprs[2] += (V_factor_final_0)*term_Type2_0\n# < pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]\nexprs[3] += (V_factor_final_1)*term_Type4_0\nexprs[3] += (V_factor_final_0)*term_Type3_0\n# < pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]\nexprs[4] += (V_factor_final_1)*term_Type4_1\n# < pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]\nexprs[5] += (V_factor_final_0)*term_Type2_1\nexprs[5] += (V_factor_final_1)*term_Type4_2\n# < pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]\nexprs[6] += (V_factor_final_1)*term_Type4_2\n# < pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]\nexprs[7] += (V_factor_final_0)*term_Type2_1\n# < pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]\nexprs[8] += (V_factor_final_0)*term_Type3_1\nexprs[8] += (V_factor_final_1)*term_Type4_2\n# < pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]\nexprs[9] += (V_factor_final_1)*term_Type4_2\n# < pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]\nexprs[10] += (V_factor_final_0)*term_Type3_1\n# < pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]\nexprs[11] += (V_factor_final_1)*term_Type4_3\n# < pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]\nexprs[12] += (V_factor_final_1)*term_Type4_3\n# < pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]\n# End CExpr"
 ],
 [
  "[('Type0', ()), ('Type1', ((('x1', 'x2'), 1), (('x2', 'x1'), 1))), ('Type2', ((('x1', 'x2'), 1), (('x2', 'x3'), 1), (('x3', 'x1'), 1))), ('Type3', ((('x1', 'x3'), 1), (('x2', 'x1'), 1), (('x3', 'x2'), 1))), ('Type4', ((('x1', 'x2'), 1), (('x2', 'x1'), 1), (('x3', 'x3'), 1)))]"
 ],
 [
  "['x1', 'x2', 'x3']"
 ],
 [
  "[]"
 ],
 [
  "[('V_factor_final_0', ea.Expr([ea.Term([],1)])), ('V_factor_final_1', ea.Expr([ea.Term([],-1)]))]"
 ],
 [
  "[('V_S_0', S('l','x1','x2')), ('V_S_1', S('l','x2','x1')), ('V_S_2', S('l','x2','x3')), ('V_S_3', S('l','x3','x1')), ('V_S_4', S('l','x1','x3')), ('V_S_5', S('l','x3','x2')), ('V_S_6', S('l','x3','x3')), ('V_S_7', S('s','x3','x3'))]"
 ],
 [
  "[]"
 ],
 [
  "[('V_prod_GS_0', (G(5), Var('V_S_0'))), ('V_prod_SG_0', (Var('V_prod_GS_0'), G(5))), ('V_prod_GS_1', (G(5), Var('V_S_1'))), ('V_prod_SG_1', (Var('V_prod_GS_1'), G(5))), ('V_prod_SS_0', (Var('V_prod_SG_0'), Var('V_S_2'))), ('V_prod_SS_1', (Var('V_prod_SG_1'), Var('V_S_4'))), ('V_prod_SS_2', (Var('V_S_3'), Var('V_prod_SS_0'))), ('V_prod_SS_3', (Var('V_S_5'), Var('V_prod_SS_1')))]"
 ],
 [
  "[]"
 ],
 [
  "[('V_tr_0', Tr([Var('V_prod_SG_0'), Var('V_S_1')],'sc')), ('V_tr_1', Tr([Var('V_prod_SS_2')],'sc')), ('V_tr_2', Tr([G(3), Var('V_prod_SS_2')],'sc')), ('V_tr_3', Tr([Var('V_prod_SS_3')],'sc')), ('V_tr_4', Tr([G(3), Var('V_prod_SS_3')],'sc')), ('V_tr_5', Tr([Var('V_S_6')],'sc')), ('V_tr_6', Tr([Var('V_S_7')],'sc')), ('V_tr_7', Tr([G(3), Var('V_S_6')],'sc')), ('V_tr_8', Tr([G(3), Var('V_S_7')],'sc'))]"
 ],
 [
  "[]"
 ],
 [
  "[('term_Type0_0', Term([],[],1)), ('term_Type1_0', Term([Var('V_tr_0')],[],1)), ('term_Type2_0', Term([Var('V_tr_1')],[],1)), ('term_Type2_1', Term([Var('V_tr_2')],[],1)), ('term_Type3_0', Term([Var('V_tr_3')],[],1)), ('term_Type3_1', Term([Var('V_tr_4')],[],1)), ('term_Type4_0', Term([Var('V_tr_0'), Var('V_tr_5')],[],1)), ('term_Type4_1', Term([Var('V_tr_0'), Var('V_tr_6')],[],1)), ('term_Type4_2', Term([Var('V_tr_0'), Var('V_tr_7')],[],1)), ('term_Type4_3', Term([Var('V_tr_0'), Var('V_tr_8')],[],1))]"
 ],
 [
  "[('< (1) >  exprs[0]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_0,[],Var)],1)]), 'term_Type0_0')]), ('< pi+(x2)^dag * pi+(x1) >  exprs[1]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_0,[],Var)],1)]), 'term_Type1_0')]), ('< pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_1,[],Var)],1)]), 'term_Type4_0'), (ea.Expr([ea.Term([ea.Factor(V_factor_final_0,[],Var)],1)]), 'term_Type2_0')]), ('< pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_1,[],Var)],1)]), 'term_Type4_0'), (ea.Expr([ea.Term([ea.Factor(V_factor_final_0,[],Var)],1)]), 'term_Type3_0')]), ('< pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_1,[],Var)],1)]), 'term_Type4_1')]), ('< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_0,[],Var)],1)]), 'term_Type2_1'), (ea.Expr([ea.Term([ea.Factor(V_factor_final_1,[],Var)],1)]), 'term_Type4_2')]), ('< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_1,[],Var)],1)]), 'term_Type4_2')]), ('< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_0,[],Var)],1)]), 'term_Type2_1')]), ('< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_0,[],Var)],1)]), 'term_Type3_1'), (ea.Expr([ea.Term([ea.Factor(V_factor_final_1,[],Var)],1)]), 'term_Type4_2')]), ('< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_1,[],Var)],1)]), 'term_Type4_2')]), ('< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_0,[],Var)],1)]), 'term_Type3_1')]), ('< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_1,[],Var)],1)]), 'term_Type4_3')]), ('< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]', [(ea.Expr([ea.Term([ea.Factor(V_factor_final_1,[],Var)],1)]), 'term_Type4_3')]), ('< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]', [])]"
 ],
 [
  "diagram_type_dict = qac.get_diagram_type_dict(cexpr_opt)"
 ],
 [
  "diagram_type_dict[()] = 'Type0'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1))] = 'Type1'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x3'), 1), (('x3', 'x1'), 1))] = 'Type2'"
 ],
 [
  "diagram_type_dict[((('x1', 'x3'), 1), (('x2', 'x1'), 1), (('x3', 'x2'), 1))] = 'Type3'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1), (('x3', 'x3'), 1))] = 'Type4'"
 ],
 [
  "qac.get_expr_names(cexpr_opt)"
 ],
 [
  "< (1) >  exprs[0]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) >  exprs[1]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]"
 ],
 [
  "from auto_contractor.runtime import *\n\n### ----\n\n@timer\ndef cexpr_function(*, positions_dict, get_prop, is_ama_and_sloppy=False):\n    # get_props\n    props, cms, factors = cexpr_function_get_prop(positions_dict, get_prop)\n    # eval\n    ama_val = cexpr_function_eval(positions_dict, props, cms, factors)\n    # extract sloppy val\n    val_sloppy = ama_extract(ama_val, is_sloppy=True)\n    # extract AMA val\n    val_ama = ama_extract(ama_val)\n    # return\n    if is_ama_and_sloppy:\n        # return both AMA corrected results and sloppy results\n        return val_ama, val_sloppy\n    else:\n        # return AMA corrected results by default\n        return val_ama\n\n### ----\n\n@timer_flops\ndef cexpr_function_get_prop(positions_dict, get_prop):\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    x3 = positions_dict['x3']\n    # get prop\n    V_S_0 = get_prop('l', x1, x2)\n    V_S_1 = get_prop('l', x2, x1)\n    V_S_2 = get_prop('l', x2, x3)\n    V_S_3 = get_prop('l', x3, x1)\n    V_S_4 = get_prop('l', x1, x3)\n    V_S_5 = get_prop('l', x3, x2)\n    V_S_6 = get_prop('l', x3, x3)\n    V_S_7 = get_prop('s', x3, x3)\n    # get color matrix\n    # set props for return\n    props = [\n        V_S_0,\n        V_S_1,\n        V_S_2,\n        V_S_3,\n        V_S_4,\n        V_S_5,\n        V_S_6,\n        V_S_7,\n        ]\n    # set color matrix for return\n    cms = [\n        ]\n    # set intermediate factors\n    # declare factors\n    factors = np.zeros(2, dtype=np.complex128)\n    factors_view = factors # Python only\n    # set factors\n    # V_factor_final_0\n    V_factor_final_0 = (1) # Python only\n    factors_view[0] = V_factor_final_0\n    # V_factor_final_1\n    V_factor_final_1 = ((-1+0j)) # Python only\n    factors_view[1] = V_factor_final_1\n    # set flops\n    total_flops = len(props) * 144 * 2 * 8 + len(cms) * 9 * 2 * 8 + len(factors) * 2 * 8\n    # return\n    return total_flops, (props, cms, factors,)\n\n### ----\n\n@timer_flops\ndef cexpr_function_eval(positions_dict, props, cms, factors):\n    # load AMA props with proper format\n    props = [ load_prop(p) for p in props ]\n    # join the AMA props\n    ama_props = ama_list(*props)\n    # apply eval to the factors and AMA props\n    ama_val = ama_apply1(lambda x_props: cexpr_function_eval_with_props(positions_dict, x_props, cms, factors), ama_props)\n    # set flops\n    total_flops = ama_counts(ama_val) * total_sloppy_flops\n    # return\n    return total_flops, ama_val\n\n### ----\n\n@timer_flops\ndef cexpr_function_eval_with_props(positions_dict, props, cms, factors_view): # Python only\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    x3 = positions_dict['x3']\n    # set props\n    p_V_S_0 = props[0] # Python only\n    p_V_S_1 = props[1] # Python only\n    p_V_S_2 = props[2] # Python only\n    p_V_S_3 = props[3] # Python only\n    p_V_S_4 = props[4] # Python only\n    p_V_S_5 = props[5] # Python only\n    p_V_S_6 = props[6] # Python only\n    p_V_S_7 = props[7] # Python only\n    # set cms\n    # set factors\n    V_factor_final_0 = factors_view[0] # Python only\n    V_factor_final_1 = factors_view[1] # Python only\n    # compute products\n    V_prod_GS_0 = mat_mul_sm_wm(get_gamma_matrix(5), p_V_S_0) # Python only\n    V_prod_SG_0 = mat_mul_wm_sm(V_prod_GS_0, get_gamma_matrix(5)) # Python only\n    V_prod_GS_1 = mat_mul_sm_wm(get_gamma_matrix(5), p_V_S_1) # Python only\n    V_prod_SG_1 = mat_mul_wm_sm(V_prod_GS_1, get_gamma_matrix(5)) # Python only\n    V_prod_SS_0 = mat_mul_wm_wm(V_prod_SG_0, p_V_S_2) # Python only\n    V_prod_SS_1 = mat_mul_wm_wm(V_prod_SG_1, p_V_S_4) # Python only\n    V_prod_SS_2 = mat_mul_wm_wm(p_V_S_3, V_prod_SS_0) # Python only\n    V_prod_SS_3 = mat_mul_wm_wm(p_V_S_5, V_prod_SS_1) # Python only\n    # compute chains\n    # compute traces\n    V_tr_0 = mat_tr_wm_wm(V_prod_SG_0, p_V_S_1) # Python only\n    V_tr_1 = mat_tr_wm(V_prod_SS_2) # Python only\n    V_tr_2 = mat_tr_sm_wm(get_gamma_matrix(3), V_prod_SS_2) # Python only\n    V_tr_3 = mat_tr_wm(V_prod_SS_3) # Python only\n    V_tr_4 = mat_tr_sm_wm(get_gamma_matrix(3), V_prod_SS_3) # Python only\n    V_tr_5 = mat_tr_wm(p_V_S_6) # Python only\n    V_tr_6 = mat_tr_wm(p_V_S_7) # Python only\n    V_tr_7 = mat_tr_sm_wm(get_gamma_matrix(3), p_V_S_6) # Python only\n    V_tr_8 = mat_tr_sm_wm(get_gamma_matrix(3), p_V_S_7) # Python only\n    # compute baryon_props\n    # set terms\n    term_Type0_0 = 1 # Python only\n    term_Type1_0 = V_tr_0 # Python only\n    term_Type2_0 = V_tr_1 # Python only\n    term_Type2_1 = V_tr_2 # Python only\n    term_Type3_0 = V_tr_3 # Python only\n    term_Type3_1 = V_tr_4 # Python only\n    term_Type4_0 = V_tr_0 * V_tr_5 # Python only\n    term_Type4_1 = V_tr_0 * V_tr_6 # Python only\n    term_Type4_2 = V_tr_0 * V_tr_7 # Python only\n    term_Type4_3 = V_tr_0 * V_tr_8 # Python only\n    # declare exprs\n    exprs = np.zeros(14, dtype=np.complex128)\n    exprs_view = exprs # Python only\n    # set exprs\n    # 0 name='< (1) >  exprs[0]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type0_0\n    exprs_view[0] = expr_V_a # Python only\n    # 1 name='< pi+(x2)^dag * pi+(x1) >  exprs[1]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type1_0\n    exprs_view[1] = expr_V_a # Python only\n    # 2 name='< pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_0\n    expr_V_a += (((V_factor_final_0))) * term_Type2_0\n    exprs_view[2] = expr_V_a # Python only\n    # 3 name='< pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_0\n    expr_V_a += (((V_factor_final_0))) * term_Type3_0\n    exprs_view[3] = expr_V_a # Python only\n    # 4 name='< pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_1\n    exprs_view[4] = expr_V_a # Python only\n    # 5 name='< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type2_1\n    expr_V_a += (((V_factor_final_1))) * term_Type4_2\n    exprs_view[5] = expr_V_a # Python only\n    # 6 name='< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_2\n    exprs_view[6] = expr_V_a # Python only\n    # 7 name='< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type2_1\n    exprs_view[7] = expr_V_a # Python only\n    # 8 name='< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type3_1\n    expr_V_a += (((V_factor_final_1))) * term_Type4_2\n    exprs_view[8] = expr_V_a # Python only\n    # 9 name='< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_2\n    exprs_view[9] = expr_V_a # Python only\n    # 10 name='< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type3_1\n    exprs_view[10] = expr_V_a # Python only\n    # 11 name='< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_3\n    exprs_view[11] = expr_V_a # Python only\n    # 12 name='< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_3\n    exprs_view[12] = expr_V_a # Python only\n    # 13 name='< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]' \n    exprs_view[13] = 0\n    # set flops\n    total_flops = total_sloppy_flops\n    # return\n    return total_flops, exprs\n\n### ----\n\n\n### ----\n\n# Total flops per sloppy call is: 72662\ntotal_sloppy_flops = 72662"
 ],
 [
  "diagram_type_dict = qac.get_diagram_type_dict(ccexpr)"
 ],
 [
  "diagram_type_dict[()] = 'Type0'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1))] = 'Type1'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x3'), 1), (('x3', 'x1'), 1))] = 'Type2'"
 ],
 [
  "diagram_type_dict[((('x1', 'x3'), 1), (('x2', 'x1'), 1), (('x3', 'x2'), 1))] = 'Type3'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1), (('x3', 'x3'), 1))] = 'Type4'"
 ],
 [
  "qac.get_expr_names(ccexpr)"
 ],
 [
  "< (1) >  exprs[0]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) >  exprs[1]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]"
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check get_data_sig is_cython=False",
  {
   "real": 21.511440542111245,
   "imag": 130.0796611053753,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check_ama get_data_sig is_cython=False",
  {
   "real": 1886.412452153016,
   "imag": 369.6859833953503,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "from auto_contractor.runtime import *\nimport cython # Cython\ncimport qlat_utils.everything as cc # Cython\ncimport qlat_utils.all as qu # Cython\ncimport libcpp.complex # Cython\ncimport numpy # Cython\n\n### ----\n\n@timer\ndef cexpr_function(*, positions_dict, get_prop, is_ama_and_sloppy=False):\n    # get_props\n    props, cms, factors = cexpr_function_get_prop(positions_dict, get_prop)\n    # eval\n    ama_val = cexpr_function_eval(positions_dict, props, cms, factors)\n    # extract sloppy val\n    val_sloppy = ama_extract(ama_val, is_sloppy=True)\n    # extract AMA val\n    val_ama = ama_extract(ama_val)\n    # return\n    if is_ama_and_sloppy:\n        # return both AMA corrected results and sloppy results\n        return val_ama, val_sloppy\n    else:\n        # return AMA corrected results by default\n        return val_ama\n\n### ----\n\n@timer_flops\n@cython.boundscheck(False) # Cython\n@cython.wraparound(False) # Cython\ndef cexpr_function_get_prop(positions_dict, get_prop):\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    x3 = positions_dict['x3']\n    # get prop\n    V_S_0 = get_prop('l', x1, x2)\n    V_S_1 = get_prop('l', x2, x1)\n    V_S_2 = get_prop('l', x2, x3)\n    V_S_3 = get_prop('l', x3, x1)\n    V_S_4 = get_prop('l', x1, x3)\n    V_S_5 = get_prop('l', x3, x2)\n    V_S_6 = get_prop('l', x3, x3)\n    V_S_7 = get_prop('s', x3, x3)\n    # get color matrix\n    # set props for return\n    props = [\n        V_S_0,\n        V_S_1,\n        V_S_2,\n        V_S_3,\n        V_S_4,\n        V_S_5,\n        V_S_6,\n        V_S_7,\n        ]\n    # set color matrix for return\n    cms = [\n        ]\n    # set intermediate factors\n    # declare factors\n    cdef numpy.ndarray[numpy.complex128_t] factors # Cython\n    factors = np.zeros(2, dtype=np.complex128)\n    cdef cc.PyComplexD[:] factors_view = factors # Cython\n    # set factors\n    # V_factor_final_0\n    cdef cc.PyComplexD V_factor_final_0 = (1) # Cython\n    factors_view[0] = V_factor_final_0\n    # V_factor_final_1\n    cdef cc.PyComplexD V_factor_final_1 = ((-1+0j)) # Cython\n    factors_view[1] = V_factor_final_1\n    # set flops\n    total_flops = len(props) * 144 * 2 * 8 + len(cms) * 9 * 2 * 8 + len(factors) * 2 * 8\n    # return\n    return total_flops, (props, cms, factors,)\n\n### ----\n\n@timer_flops\ndef cexpr_function_eval(positions_dict, props, cms, factors):\n    # load AMA props with proper format\n    props = [ load_prop(p) for p in props ]\n    # join the AMA props\n    ama_props = ama_list(*props)\n    # apply eval to the factors and AMA props\n    ama_val = ama_apply1(lambda x_props: cexpr_function_eval_with_props(positions_dict, x_props, cms, factors), ama_props)\n    # set flops\n    total_flops = ama_counts(ama_val) * total_sloppy_flops\n    # return\n    return total_flops, ama_val\n\n### ----\n\n@timer_flops\n@cython.boundscheck(False) # Cython\n@cython.wraparound(False) # Cython\ndef cexpr_function_eval_with_props(dict positions_dict, list props, list cms, cc.PyComplexD[:] factors_view): # Cython\n    # set positions\n    x1 = positions_dict['x1']\n    x2 = positions_dict['x2']\n    x3 = positions_dict['x3']\n    # set props\n    cdef cc.WilsonMatrix* p_V_S_0 = &(<qu.WilsonMatrix>props[0]).xx # Cython\n    cdef cc.WilsonMatrix* p_V_S_1 = &(<qu.WilsonMatrix>props[1]).xx # Cython\n    cdef cc.WilsonMatrix* p_V_S_2 = &(<qu.WilsonMatrix>props[2]).xx # Cython\n    cdef cc.WilsonMatrix* p_V_S_3 = &(<qu.WilsonMatrix>props[3]).xx # Cython\n    cdef cc.WilsonMatrix* p_V_S_4 = &(<qu.WilsonMatrix>props[4]).xx # Cython\n    cdef cc.WilsonMatrix* p_V_S_5 = &(<qu.WilsonMatrix>props[5]).xx # Cython\n    cdef cc.WilsonMatrix* p_V_S_6 = &(<qu.WilsonMatrix>props[6]).xx # Cython\n    cdef cc.WilsonMatrix* p_V_S_7 = &(<qu.WilsonMatrix>props[7]).xx # Cython\n    # set cms\n    # set factors\n    cdef cc.PyComplexD V_factor_final_0 = factors_view[0] # Cython\n    cdef cc.PyComplexD V_factor_final_1 = factors_view[1] # Cython\n    # compute products\n    cdef cc.WilsonMatrix V_prod_GS_0 = qu.gamma_matrix_5 * p_V_S_0[0] # Cython\n    cdef cc.WilsonMatrix V_prod_SG_0 = V_prod_GS_0 * qu.gamma_matrix_5 # Cython\n    cdef cc.WilsonMatrix V_prod_GS_1 = qu.gamma_matrix_5 * p_V_S_1[0] # Cython\n    cdef cc.WilsonMatrix V_prod_SG_1 = V_prod_GS_1 * qu.gamma_matrix_5 # Cython\n    cdef cc.WilsonMatrix V_prod_SS_0 = V_prod_SG_0 * p_V_S_2[0] # Cython\n    cdef cc.WilsonMatrix V_prod_SS_1 = V_prod_SG_1 * p_V_S_4[0] # Cython\n    cdef cc.WilsonMatrix V_prod_SS_2 = p_V_S_3[0] * V_prod_SS_0 # Cython\n    cdef cc.WilsonMatrix V_prod_SS_3 = p_V_S_5[0] * V_prod_SS_1 # Cython\n    # compute chains\n    # compute traces\n    cdef cc.PyComplexD V_tr_0 = cc.pycc_d(cc.matrix_trace(V_prod_SG_0, p_V_S_1[0])) # Cython\n    cdef cc.PyComplexD V_tr_1 = cc.pycc_d(cc.matrix_trace(V_prod_SS_2)) # Cython\n    cdef cc.PyComplexD V_tr_2 = cc.pycc_d(cc.matrix_trace(qu.gamma_matrix_3, V_prod_SS_2)) # Cython\n    cdef cc.PyComplexD V_tr_3 = cc.pycc_d(cc.matrix_trace(V_prod_SS_3)) # Cython\n    cdef cc.PyComplexD V_tr_4 = cc.pycc_d(cc.matrix_trace(qu.gamma_matrix_3, V_prod_SS_3)) # Cython\n    cdef cc.PyComplexD V_tr_5 = cc.pycc_d(cc.matrix_trace(p_V_S_6[0])) # Cython\n    cdef cc.PyComplexD V_tr_6 = cc.pycc_d(cc.matrix_trace(p_V_S_7[0])) # Cython\n    cdef cc.PyComplexD V_tr_7 = cc.pycc_d(cc.matrix_trace(qu.gamma_matrix_3, p_V_S_6[0])) # Cython\n    cdef cc.PyComplexD V_tr_8 = cc.pycc_d(cc.matrix_trace(qu.gamma_matrix_3, p_V_S_7[0])) # Cython\n    # compute baryon_props\n    # set terms\n    cdef cc.PyComplexD term_Type0_0 = 1 # Cython\n    cdef cc.PyComplexD term_Type1_0 = V_tr_0 # Cython\n    cdef cc.PyComplexD term_Type2_0 = V_tr_1 # Cython\n    cdef cc.PyComplexD term_Type2_1 = V_tr_2 # Cython\n    cdef cc.PyComplexD term_Type3_0 = V_tr_3 # Cython\n    cdef cc.PyComplexD term_Type3_1 = V_tr_4 # Cython\n    cdef cc.PyComplexD term_Type4_0 = V_tr_0 * V_tr_5 # Cython\n    cdef cc.PyComplexD term_Type4_1 = V_tr_0 * V_tr_6 # Cython\n    cdef cc.PyComplexD term_Type4_2 = V_tr_0 * V_tr_7 # Cython\n    cdef cc.PyComplexD term_Type4_3 = V_tr_0 * V_tr_8 # Cython\n    # declare exprs\n    cdef numpy.ndarray[numpy.complex128_t] exprs # Cython\n    exprs = np.zeros(14, dtype=np.complex128)\n    cdef cc.PyComplexD[:] exprs_view = exprs # Cython\n    # set exprs\n    cdef cc.PyComplexD expr_V_a # Cython\n    # 0 name='< (1) >  exprs[0]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type0_0\n    exprs_view[0] = expr_V_a # Cython\n    # 1 name='< pi+(x2)^dag * pi+(x1) >  exprs[1]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type1_0\n    exprs_view[1] = expr_V_a # Cython\n    # 2 name='< pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_0\n    expr_V_a += (((V_factor_final_0))) * term_Type2_0\n    exprs_view[2] = expr_V_a # Cython\n    # 3 name='< pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_0\n    expr_V_a += (((V_factor_final_0))) * term_Type3_0\n    exprs_view[3] = expr_V_a # Cython\n    # 4 name='< pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_1\n    exprs_view[4] = expr_V_a # Cython\n    # 5 name='< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type2_1\n    expr_V_a += (((V_factor_final_1))) * term_Type4_2\n    exprs_view[5] = expr_V_a # Cython\n    # 6 name='< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_2\n    exprs_view[6] = expr_V_a # Cython\n    # 7 name='< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type2_1\n    exprs_view[7] = expr_V_a # Cython\n    # 8 name='< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type3_1\n    expr_V_a += (((V_factor_final_1))) * term_Type4_2\n    exprs_view[8] = expr_V_a # Cython\n    # 9 name='< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_2\n    exprs_view[9] = expr_V_a # Cython\n    # 10 name='< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_0))) * term_Type3_1\n    exprs_view[10] = expr_V_a # Cython\n    # 11 name='< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_3\n    exprs_view[11] = expr_V_a # Cython\n    # 12 name='< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]' \n    expr_V_a = 0\n    expr_V_a += (((V_factor_final_1))) * term_Type4_3\n    exprs_view[12] = expr_V_a # Cython\n    # 13 name='< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]' \n    exprs_view[13] = 0\n    # set flops\n    total_flops = total_sloppy_flops\n    # return\n    return total_flops, exprs\n\n### ----\n\n\n### ----\n\n# Total flops per sloppy call is: 72662\ntotal_sloppy_flops = 72662"
 ],
 [
  "diagram_type_dict = qac.get_diagram_type_dict(ccexpr)"
 ],
 [
  "diagram_type_dict[()] = 'Type0'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1))] = 'Type1'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x3'), 1), (('x3', 'x1'), 1))] = 'Type2'"
 ],
 [
  "diagram_type_dict[((('x1', 'x3'), 1), (('x2', 'x1'), 1), (('x3', 'x2'), 1))] = 'Type3'"
 ],
 [
  "diagram_type_dict[((('x1', 'x2'), 1), (('x2', 'x1'), 1), (('x3', 'x3'), 1))] = 'Type4'"
 ],
 [
  "qac.get_expr_names(ccexpr)"
 ],
 [
  "< (1) >  exprs[0]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) >  exprs[1]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar u)(x3) >  exprs[2]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar d)(x3) >  exprs[3]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar s)(x3) >  exprs[4]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) >  exprs[5]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type4)  exprs[6]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (ubar g3 u)(x3) > (Type2,Type3)  exprs[7]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) >  exprs[8]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type4)  exprs[9]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (dbar g3 d)(x3) > (Type2,Type3)  exprs[10]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) >  exprs[11]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type4)  exprs[12]"
 ],
 [
  "< pi+(x2)^dag * pi+(x1) * (sbar g3 s)(x3) > (Type2,Type3)  exprs[13]"
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check get_data_sig is_cython=True",
  {
   "real": 21.511440542111245,
   "imag": 130.0796611053753,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "get_cexpr_test benchmark_eval_cexpr check_ama get_data_sig is_cython=True",
  {
   "real": 1886.412452153016,
   "imag": 369.6859833953503,
   "__extended_json_type__": "complex128"
  }
 ],
 [
  "get_prop c_pi",
  {
   "real": 0.4147571078797414,
   "imag": -1.6355977342588832,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[0]",
  {
   "real": 1.0,
   "imag": 0.0,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[1]",
  {
   "real": 0.4147571078797414,
   "imag": -1.6355977342588832,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[2]",
  {
   "real": -16.828688209927744,
   "imag": 18.763914171459835,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[3]",
  {
   "real": 15.014437522161112,
   "imag": 11.35663220804474,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[4]",
  {
   "real": 5.596240268452623,
   "imag": 2.3472281516704983,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[5]",
  {
   "real": 0.3140937422644905,
   "imag": -18.6361096335873,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[6]",
  {
   "real": -5.52009748716045,
   "imag": -0.005029420152316222,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[7]",
  {
   "real": 5.83419122942494,
   "imag": -18.631080213434984,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[8]",
  {
   "real": -15.54735358155239,
   "imag": 18.02356238435194,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[9]",
  {
   "real": -5.52009748716045,
   "imag": -0.005029420152316222,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[10]",
  {
   "real": -10.02725609439194,
   "imag": 18.028591804504256,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[11]",
  {
   "real": 0.8843792191544837,
   "imag": 5.037044902835048,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[12]",
  {
   "real": 0.8843792191544837,
   "imag": 5.037044902835048,
   "__extended_json_type__": "complex"
  }
 ],
 [
  "eval_cexpr res[13]",
  {
   "real": 0.0,
   "imag": 0.0,
   "__extended_json_type__": "complex"
  }
 ]
]