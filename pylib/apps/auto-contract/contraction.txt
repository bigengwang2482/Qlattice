def test_meson_jj():
    diagram_type_dict = dict()
    diagram_type_dict[((('t_1', 'x_1'), 1), (('t_2', 'x_2'), 1), (('x_1', 't_1'), 1), (('x_2', 't_2'), 1))] = "Type1"
    diagram_type_dict[((('t_1', 'x_1'), 1), (('t_2', 'x_2'), 1), (('x_1', 't_2'), 1), (('x_2', 't_1'), 1))] = "Type2"
    diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 'x_1'), 1), (('x_1', 'x_2'), 1), (('x_2', 't_1'), 1))] = "Type3"
    diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 't_1'), 1), (('x_1', 'x_2'), 1), (('x_2', 'x_1'), 1))] = None # "Type4"
    diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 'x_1'), 1), (('x_1', 't_1'), 1), (('x_2', 'x_2'), 1))] = None # "Type5"
    diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 't_1'), 1), (('x_1', 'x_1'), 1), (('x_2', 'x_2'), 1))] = None # "Type6"
    exprs = [
            mk_pi_0("t_1", True) * mk_j_mu("x_1", "mu") * mk_j_mu("x_2", "nu") * mk_pi_0("t_2"),
            mk_pi_p("t_1", True) * mk_j_mu("x_1", "mu") * mk_j_mu("x_2", "nu") * mk_pi_p("t_2"),
            mk_k_0("t_1", True) * mk_j_mu("x_1", "mu") * mk_j_mu("x_2", "nu") * mk_k_0("t_2"),
            mk_k_p("t_1", True) * mk_j_mu("x_1", "mu") * mk_j_mu("x_2", "nu") * mk_k_p("t_2"),
            ]
    cexpr = contract_simplify_compile(*exprs, is_isospin_symmetric_limit = True, diagram_type_dict = diagram_type_dict)
    print(display_cexpr(cexpr))

Begin CExpr
diagram_type_dict = dict()
diagram_type_dict[((('t_1', 'x_1'), 1), (('t_2', 'x_2'), 1), (('x_1', 't_1'), 1), (('x_2', 't_2'), 1))] = 'Type1'
diagram_type_dict[((('t_1', 'x_1'), 1), (('t_2', 'x_2'), 1), (('x_1', 't_2'), 1), (('x_2', 't_1'), 1))] = 'Type2'
diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 'x_1'), 1), (('x_1', 'x_2'), 1), (('x_2', 't_1'), 1))] = 'Type3'
diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 't_1'), 1), (('x_1', 'x_2'), 1), (('x_2', 'x_1'), 1))] = None
diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 'x_1'), 1), (('x_1', 't_1'), 1), (('x_2', 'x_2'), 1))] = None
diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 't_1'), 1), (('x_1', 'x_1'), 1), (('x_2', 'x_2'), 1))] = None
Positions:
t_1, t_2, x_1, x_2 = ['t_1', 't_2', 'x_1', 'x_2']
terms = [
  tr(gamma(mu)*S_l(x_1,t_1)*gamma_5*S_l(t_1,x_1))*tr(gamma(nu)*S_l(x_2,t_2)*gamma_5*S_l(t_2,x_2)), # term_Type1_0001
  tr(gamma(mu)*S_l(x_1,t_2)*gamma_5*S_l(t_2,x_1))*tr(gamma(nu)*S_l(x_2,t_1)*gamma_5*S_l(t_1,x_2)), # term_Type1_0002
  tr(gamma(mu)*S_l(x_1,t_1)*gamma_5*S_l(t_1,x_2)*gamma(nu)*S_l(x_2,t_2)*gamma_5*S_l(t_2,x_1)), # term_Type2_0001
  tr(gamma(mu)*S_l(x_1,t_2)*gamma_5*S_l(t_2,x_2)*gamma(nu)*S_l(x_2,t_1)*gamma_5*S_l(t_1,x_1)), # term_Type2_0002
  tr(gamma(mu)*S_l(x_1,t_2)*gamma_5*S_s(t_2,x_2)*gamma(nu)*S_s(x_2,t_1)*gamma_5*S_l(t_1,x_1)), # term_Type2_0003
  tr(gamma(mu)*S_s(x_1,t_1)*gamma_5*S_l(t_1,x_2)*gamma(nu)*S_l(x_2,t_2)*gamma_5*S_s(t_2,x_1)), # term_Type2_0004
  tr(gamma(mu)*S_l(x_1,t_1)*gamma_5*S_l(t_1,t_2)*gamma_5*S_l(t_2,x_2)*gamma(nu)*S_l(x_2,x_1)), # term_Type3_0001
  tr(gamma(mu)*S_l(x_1,t_2)*gamma_5*S_l(t_2,t_1)*gamma_5*S_l(t_1,x_2)*gamma(nu)*S_l(x_2,x_1)), # term_Type3_0002
  tr(gamma(mu)*S_l(x_1,x_2)*gamma(nu)*S_l(x_2,t_1)*gamma_5*S_l(t_1,t_2)*gamma_5*S_l(t_2,x_1)), # term_Type3_0003
  tr(gamma(mu)*S_l(x_1,x_2)*gamma(nu)*S_l(x_2,t_2)*gamma_5*S_l(t_2,t_1)*gamma_5*S_l(t_1,x_1)), # term_Type3_0004
  tr(gamma(mu)*S_l(x_1,t_2)*gamma_5*S_s(t_2,t_1)*gamma_5*S_l(t_1,x_2)*gamma(nu)*S_l(x_2,x_1)), # term_Type3_0005
  tr(gamma(mu)*S_l(x_1,x_2)*gamma(nu)*S_l(x_2,t_2)*gamma_5*S_s(t_2,t_1)*gamma_5*S_l(t_1,x_1)), # term_Type3_0006
  tr(gamma(mu)*S_s(x_1,t_1)*gamma_5*S_l(t_1,t_2)*gamma_5*S_s(t_2,x_2)*gamma(nu)*S_s(x_2,x_1)), # term_Type3_0007
  tr(gamma(mu)*S_s(x_1,x_2)*gamma(nu)*S_s(x_2,t_1)*gamma_5*S_l(t_1,t_2)*gamma_5*S_s(t_2,x_1)), # term_Type3_0008
]
term_Type1_0001 = terms[0]
term_Type1_0002 = terms[1]
term_Type2_0001 = terms[2]
term_Type2_0002 = terms[3]
term_Type2_0003 = terms[4]
term_Type2_0004 = terms[5]
term_Type3_0001 = terms[6]
term_Type3_0002 = terms[7]
term_Type3_0003 = terms[8]
term_Type3_0004 = terms[9]
term_Type3_0005 = terms[10]
term_Type3_0006 = terms[11]
term_Type3_0007 = terms[12]
term_Type3_0008 = terms[13]
typed_exprs = [ dict() for i in range(4) ]
typed_exprs[0]['Type1'] # < pi0(t_1) * j_mu(x_1,mu) * j_mu(x_2,nu) * pi0(t_2) >
  = (-1/2)*term_Type1_0001+(-1/2)*term_Type1_0002
typed_exprs[0]['Type2'] # < pi0(t_1) * j_mu(x_1,mu) * j_mu(x_2,nu) * pi0(t_2) >
  = (5/18)*term_Type2_0001+(5/18)*term_Type2_0002
typed_exprs[0]['Type3'] # < pi0(t_1) * j_mu(x_1,mu) * j_mu(x_2,nu) * pi0(t_2) >
  = (5/18)*term_Type3_0001+(5/18)*term_Type3_0002+(5/18)*term_Type3_0003+(5/18)*term_Type3_0004
typed_exprs[1]['Type2'] # < pi+(t_1)^dag * j_mu(x_1,mu) * j_mu(x_2,nu) * pi+(t_2) >
  = (-2/9)*term_Type2_0001+(-2/9)*term_Type2_0002
typed_exprs[1]['Type3'] # < pi+(t_1)^dag * j_mu(x_1,mu) * j_mu(x_2,nu) * pi+(t_2) >
  = (1/9)*term_Type3_0001+(4/9)*term_Type3_0002+(1/9)*term_Type3_0003+(4/9)*term_Type3_0004
typed_exprs[2]['Type2'] # < K0(t_1)^dag * j_mu(x_1,mu) * j_mu(x_2,nu) * K0(t_2) >
  = (1/9)*term_Type2_0003+(1/9)*term_Type2_0004
typed_exprs[2]['Type3'] # < K0(t_1)^dag * j_mu(x_1,mu) * j_mu(x_2,nu) * K0(t_2) >
  = (1/9)*term_Type3_0005+(1/9)*term_Type3_0006+(1/9)*term_Type3_0007+(1/9)*term_Type3_0008
typed_exprs[3]['Type2'] # < K+(t_1)^dag * j_mu(x_1,mu) * j_mu(x_2,nu) * K+(t_2) >
  = (-2/9)*term_Type2_0003+(-2/9)*term_Type2_0004
typed_exprs[3]['Type3'] # < K+(t_1)^dag * j_mu(x_1,mu) * j_mu(x_2,nu) * K+(t_2) >
  = (4/9)*term_Type3_0005+(4/9)*term_Type3_0006+(1/9)*term_Type3_0007+(1/9)*term_Type3_0008
exprs = np.zeros(4)
exprs[0] # < pi0(t_1) * j_mu(x_1,mu) * j_mu(x_2,nu) * pi0(t_2) >
  = (5/18)*term_Type3_0001+(-1/2)*term_Type1_0001+(5/18)*term_Type2_0001+(5/18)*term_Type3_0002+(-1/2)*term_Type1_0002+(5/18)*term_Type2_0002+(5/18)*term_Type3_0003+(5/18)*term_Type3_0004
exprs[1] # < pi+(t_1)^dag * j_mu(x_1,mu) * j_mu(x_2,nu) * pi+(t_2) >
  = (1/9)*term_Type3_0001+(-2/9)*term_Type2_0001+(4/9)*term_Type3_0002+(-2/9)*term_Type2_0002+(1/9)*term_Type3_0003+(4/9)*term_Type3_0004
exprs[2] # < K0(t_1)^dag * j_mu(x_1,mu) * j_mu(x_2,nu) * K0(t_2) >
  = (1/9)*term_Type3_0005+(1/9)*term_Type2_0003+(1/9)*term_Type3_0006+(1/9)*term_Type3_0007+(1/9)*term_Type2_0004+(1/9)*term_Type3_0008
exprs[3] # < K+(t_1)^dag * j_mu(x_1,mu) * j_mu(x_2,nu) * K+(t_2) >
  = (4/9)*term_Type3_0005+(-2/9)*term_Type2_0003+(4/9)*term_Type3_0006+(1/9)*term_Type3_0007+(-2/9)*term_Type2_0004+(1/9)*term_Type3_0008
End CExpr

def test_meson_m():
    diagram_type_dict = dict()
    diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 'x_1'), 1), (('x_1', 't_1'), 1))] = 'Type1'
    diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 't_1'), 1), (('x_1', 'x_1'), 1))] = None
    exprs = [
            mk_pi_0("t_1", True) * mk_m("u", "x_1") * mk_pi_0("t_2"),
            mk_pi_0("t_1", True) * mk_m("d", "x_1") * mk_pi_0("t_2"),
            mk_pi_p("t_1", True) * mk_m("u", "x_1") * mk_pi_p("t_2"),
            mk_pi_p("t_1", True) * mk_m("d", "x_1") * mk_pi_p("t_2"),
            mk_k_0("t_1", True) * mk_m("d", "x_1") * mk_k_0("t_2"),
            mk_k_0("t_1", True) * mk_m("s", "x_1") * mk_k_0("t_2"),
            mk_k_p("t_1", True) * mk_m("u", "x_1") * mk_k_p("t_2"),
            mk_k_p("t_1", True) * mk_m("s", "x_1") * mk_k_p("t_2"),
            ]
    cexpr = contract_simplify_compile(*exprs, is_isospin_symmetric_limit = True, diagram_type_dict = diagram_type_dict)
    print(display_cexpr(cexpr))

Begin CExpr
diagram_type_dict = dict()
diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 'x_1'), 1), (('x_1', 't_1'), 1))] = 'Type1'
diagram_type_dict[((('t_1', 't_2'), 1), (('t_2', 't_1'), 1), (('x_1', 'x_1'), 1))] = None
Positions:
t_1, t_2, x_1 = ['t_1', 't_2', 'x_1']
terms = [
  tr(gamma_5*S_l(t_1,t_2)*gamma_5*S_l(t_2,x_1)*S_l(x_1,t_1)), # term_Type1_0001
  tr(gamma_5*S_l(t_1,x_1)*S_l(x_1,t_2)*gamma_5*S_l(t_2,t_1)), # term_Type1_0002
  tr(gamma_5*S_l(t_1,x_1)*S_l(x_1,t_2)*gamma_5*S_s(t_2,t_1)), # term_Type1_0003
  tr(gamma_5*S_l(t_1,t_2)*gamma_5*S_s(t_2,x_1)*S_s(x_1,t_1)), # term_Type1_0004
]
term_Type1_0001 = terms[0]
term_Type1_0002 = terms[1]
term_Type1_0003 = terms[2]
term_Type1_0004 = terms[3]
typed_exprs = [ dict() for i in range(8) ]
typed_exprs[0]['Type1'] # < pi0(t_1) * ubu(x_1) * pi0(t_2) >
  = (1/2)*term_Type1_0001+(1/2)*term_Type1_0002
typed_exprs[1]['Type1'] # < pi0(t_1) * dbd(x_1) * pi0(t_2) >
  = (1/2)*term_Type1_0001+(1/2)*term_Type1_0002
typed_exprs[2]['Type1'] # < pi+(t_1)^dag * ubu(x_1) * pi+(t_2) >
  = (1)*term_Type1_0002
typed_exprs[3]['Type1'] # < pi+(t_1)^dag * dbd(x_1) * pi+(t_2) >
  = (1)*term_Type1_0001
typed_exprs[4]['Type1'] # < K0(t_1)^dag * dbd(x_1) * K0(t_2) >
  = (1)*term_Type1_0003
typed_exprs[5]['Type1'] # < K0(t_1)^dag * sbs(x_1) * K0(t_2) >
  = (1)*term_Type1_0004
typed_exprs[6]['Type1'] # < K+(t_1)^dag * ubu(x_1) * K+(t_2) >
  = (1)*term_Type1_0003
typed_exprs[7]['Type1'] # < K+(t_1)^dag * sbs(x_1) * K+(t_2) >
  = (1)*term_Type1_0004
exprs = np.zeros(8)
exprs[0] # < pi0(t_1) * ubu(x_1) * pi0(t_2) >
  = (1/2)*term_Type1_0001+(1/2)*term_Type1_0002
exprs[1] # < pi0(t_1) * dbd(x_1) * pi0(t_2) >
  = (1/2)*term_Type1_0001+(1/2)*term_Type1_0002
exprs[2] # < pi+(t_1)^dag * ubu(x_1) * pi+(t_2) >
  = (1)*term_Type1_0002
exprs[3] # < pi+(t_1)^dag * dbd(x_1) * pi+(t_2) >
  = (1)*term_Type1_0001
exprs[4] # < K0(t_1)^dag * dbd(x_1) * K0(t_2) >
  = (1)*term_Type1_0003
exprs[5] # < K0(t_1)^dag * sbs(x_1) * K0(t_2) >
  = (1)*term_Type1_0004
exprs[6] # < K+(t_1)^dag * ubu(x_1) * K+(t_2) >
  = (1)*term_Type1_0003
exprs[7] # < K+(t_1)^dag * sbs(x_1) * K+(t_2) >
  = (1)*term_Type1_0004
End CExpr
