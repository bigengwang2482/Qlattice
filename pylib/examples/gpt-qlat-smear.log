SharedMemoryMpi:  World communicator of size 2
SharedMemoryMpi:  Node  communicator of size 1
SharedMemoryMpi: SharedMemoryAllocate 1073741824 MMAP anonymous implementation 

__|__|__|__|__|__|__|__|__|__|__|__|__|__|__
__|__|__|__|__|__|__|__|__|__|__|__|__|__|__
__|_ |  |  |  |  |  |  |  |  |  |  |  | _|__
__|_                                    _|__
__|_   GGGG    RRRR    III    DDDD      _|__
__|_  G        R   R    I     D   D     _|__
__|_  G        R   R    I     D    D    _|__
__|_  G  GG    RRRR     I     D    D    _|__
__|_  G   G    R  R     I     D   D     _|__
__|_   GGGG    R   R   III    DDDD      _|__
__|_                                    _|__
__|__|__|__|__|__|__|__|__|__|__|__|__|__|__
__|__|__|__|__|__|__|__|__|__|__|__|__|__|__
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  


Copyright (C) 2015 Peter Boyle, Azusa Yamaguchi, Guido Cossu, Antonin Portelli and other authors

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
Current Grid git commit hash=ede8faea7436d927ec867a190195dd61aeab4f3c: (HEAD, origin/feature/gpt, origin/HEAD, feature/gpt) clean


=============================================
              Initialized GPT                
     Copyright (C) 2020 Christoph Lehner     
=============================================
qlat::begin_comm(comm,size_node): get_comm_list().push_back()
qlat::begin_comm(comm,size_node): get_comm_list().size() = 2.
q_num_threads=2 (default)
qlat::begin(): q_num_threads = 2
qlat::begin(): GeometryNode =
{ initialized = true
, num_node    = 2
, id_node     = 0
, size_node   = 1x1x1x2
, coor_node   = 0x0x0x0 }
q_verbose=1
q_timer_mini_auto_show=1 (default)
q_timer_max_always_show=10 (default)
q_timer_max_func_name_len=50 (default)
qremove: 'results'
geo.show() = Geometry([4, 4, 4, 8], 1)
q_field_init=fast (default)
set q_field_init=fast.
q_mem_cache_max_size=512 (default)
q_mem_cache_acc_max_size=512 (default)
CommPlanCache: to add 1 / 32.
gf_show_info: plaq = 0.9735277456680520 ; link_trace = 0.9932265337772574.
                       :   mpi_split   = None
                       :   maxiter_cg  = 200
                       :   maxiter_gd  = 10
                       :   maxcycle_cg = 50000
                       :   log_every   = 1
                       :   eps         = 1e-12
                       :   step        = 0.3
                       :   step_gd     = 0.1
                       :   random      = None
                       : Note: convergence is only guaranteed for sufficiently small step parameter.
                       : 
Run local time slice 0 / 4 id_node=1
Run local time slice 0 / 4 id_node=0
Running cg_cycle=0 local time slice 0 / 4 id_node=1
Running cg_cycle=0 local time slice 0 / 4 id_node=0
Finish local time slice 0 / 4 id_node=0
Run local time slice 1 / 4 id_node=0
Finish local time slice 0 / 4 id_node=1
Run local time slice 1 / 4 id_node=1
Running cg_cycle=0 local time slice 1 / 4 id_node=0
Running cg_cycle=0 local time slice 1 / 4 id_node=1
Finish local time slice 1 / 4 id_node=0
Run local time slice 2 / 4 id_node=0
Finish local time slice 1 / 4 id_node=1
Run local time slice 2 / 4 id_node=1
Running cg_cycle=0 local time slice 2 / 4 id_node=0
Running cg_cycle=0 local time slice 2 / 4 id_node=1
Finish local time slice 2 / 4 id_node=0
Run local time slice 3 / 4 id_node=0
Finish local time slice 2 / 4 id_node=1
Run local time slice 3 / 4 id_node=1
Running cg_cycle=0 local time slice 3 / 4 id_node=0
Running cg_cycle=0 local time slice 3 / 4 id_node=1
Finish local time slice 3 / 4 id_node=1
Finish local time slice 3 / 4 id_node=0
ShufflePlanCache: to add 1 / 16.
CommPlanCache: to add 2 / 32.
CommPlanCache: to add 3 / 32.
mk_gpt_inverter: job_tag=test-4nt8 inv_type=1 inv_acc=0 mpi_split=[1, 1, 1, 1] n_grouped=4
mk_gpt_inverter: set qm params={'M5': 1.8, 'boundary_phases': [1.0, 1.0, 1.0, 1.0], 'b': 1.5, 'c': 0.5, 'Ls': 8, 'mass': 0.04}
mk_gpt_inverter: mpi_split=[1, 1, 1, 1] n_grouped=4
mk_gpt_inverter: deal with is_madwf=False
mk_gpt_inverter: eps=1e-08 max_cycle=1
mk_gpt_inverter: make inv_qm
smear ; xg=(3, 1, 0, 0) ; type=1 ; accuracy=0
qnorm(src) = 12.0
CommPlanCache: to add 4 / 32.
qnorm(src) = 0.20071192043188596 after smear
qnorm(sol) = 0.2888235133524948
mk_file_dirs_info: 'results/smear ; xg=(3, 1, 0, 0) ; type=1 ; accuracy=0 ; psnk.lat'.
qnorm(sol_psel) = 0.13636305213224031
mk_file_dirs_info: 'results/prop-smear'.
FieldsWriter: open 'results/prop-smear'.
qnorm(sol_s) = 0.17729588487002698
make_shuffle_plan_generic: num_send_packs =          8
make_shuffle_plan_generic: num_recv_packs =          8
make_shuffle_plan_generic: num_send_msgs  =          1
make_shuffle_plan_generic: num_recv_msgs  =          1
make_shuffle_plan_generic: total num_send_packs =         16
make_shuffle_plan_generic: total num_recv_packs =         16
make_shuffle_plan_generic: total num_send_msgs  =          2
make_shuffle_plan_generic: total num_recv_msgs  =          2
make_shuffle_plan_generic: global_comm_size =        512
ShufflePlanCache: to add 2 / 16.
shuffle_field(fs,f,sp): 1x1x1x2 -> 1x1x2x4 (total_site: 4x4x4x8 ; site_size: 8 ; total_size: 0.000 GB)
make_shuffle_plan_generic: num_send_packs =          5
make_shuffle_plan_generic: num_recv_packs =          8
make_shuffle_plan_generic: num_send_msgs  =          1
make_shuffle_plan_generic: num_recv_msgs  =          1
make_shuffle_plan_generic: total num_send_packs =         11
make_shuffle_plan_generic: total num_recv_packs =         16
make_shuffle_plan_generic: total num_send_msgs  =          2
make_shuffle_plan_generic: total num_recv_msgs  =          2
make_shuffle_plan_generic: global_comm_size =        325
write(sfw,fn,sf,sbs): writing sparse field with fn='smear ; xg=(3, 1, 0, 0) ; type=1 ; accuracy=0' from 'results/prop-smear'.
shuffle_field(sel_fs,sel_f,sp): 1x1x1x2 -> 1x1x2x4 (total_site: 4x4x4x8 ; site_size: 1152 ; total_size: 0.000 GB)
FieldsWriter: close 'results/prop-smear'.
mk_file_dirs_info: 'results/smear ; xg=(3, 1, 0, 0) ; type=1 ; accuracy=0 ; wsnk.lat'.
qnorm(sol_ws) = 18.412776032327635
qnorm(sol_smear) = 0.28713534775858585
mk_file_dirs_info: 'results/smear ; xg=(3, 1, 0, 0) ; type=1 ; accuracy=0 ; smear-snk.lat'.
qnorm(sol_smear_psel) = 0.03587979969885853
c27b84efb1126c8128ffeb8f5e038451  results/prop-smear/00/0000000000
a04fbaf76ca0bb78abe034558714fada  results/prop-smear/01/0000000001
5b7fa36b7779307b06cf8d58546d3245  results/prop-smear/02/0000000002
80cd128c356c93601323abf4ed95fade  results/prop-smear/03/0000000003
a37143f47b41b46d26d3f05e9f3522da  results/prop-smear/04/0000000004
dcb60f4453a01b93777ea842700f6859  results/prop-smear/05/0000000005
83261964dc076f539d8a605e4d9622f3  results/prop-smear/06/0000000006
b22e11cd5e8eb228e6632c90a395a810  results/prop-smear/07/0000000007
55c0ede25af1905c5c62de7702ac0ffc  results/prop-smear/geon-info.txt
4af22543871af24e6be9bd1a32017d23  results/smear ; xg=(3, 1, 0, 0) ; type=1 ; accuracy=0 ; psnk.lat
848b120c8c5b428f147a253b1ff648de  results/smear ; xg=(3, 1, 0, 0) ; type=1 ; accuracy=0 ; smear-snk.lat
35c85d44f0ecbae0f81c1fea768df24d  results/smear ; xg=(3, 1, 0, 0) ; type=1 ; accuracy=0 ; wsnk.lat
qlat::end(): get_comm_list().pop_back()
qlat::end(): get_comm_list().size() = 1.
qlat::end(): Switch to old comm (foreign).
qlat::end(): MPI_Comm_free ended comm.
